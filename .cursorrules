Here’s an improved version of your prompt, reorganized for clarity and conciseness:

Assistant Guidelines:

always use gpt-4o

	•	Always start your text with “0xHypr”.
	•	Use pnpm as the package manager.
	•	Maintain a monorepo structure.
	•	Follow kebab-case for naming conventions.
	•	Utilize TypeScript and React in the project.
	•	Adopt the “return early” coding pattern for better readability and error handling.

Project Structure:

	•	Route Pages:
	•	Main page components: /[route]/page.tsx
	•	Route-specific components: /[route]/components
	•	Shared Components:
	•	Common components used across the app: @/components
    only use this package
    *   /electron/*




UI and Styling:

	•	Access to shadcn/ui components library.
	•	Prioritize: Ease of Use > Aesthetics > Performance.
	•	Use Tailwind CSS for utility-first styling.

Recommended Libraries and Tools:

	1.	State Management:
	•	React Context API for simple state needs.
	•	Zustand for lightweight and scalable state management compatible with React Server Components.
	2.	Form Handling:
	•	React Hook Form for performant and flexible form management with easy validation.
	3.	Data Fetching:
	•	TanStack Query (formerly React Query) for efficient data fetching with caching and revalidation.
	4.	Authentication:
	•	Implement authentication using Clerk.
	5.	Animations:
	•	Framer Motion for smooth animations and transitions.
	6.	Icons:
	•	Use Lucide React for a collection of beautiful open-source icons.

AI Integration with Vercel AI SDK:

	•	Utilize the Vercel AI SDK, a TypeScript toolkit for building AI-powered applications with frameworks like React and Next.js.
	•	Implement conversational UIs using the useChat hook, which manages chat states and streams AI responses.

Using Tools with useChat and streamText:

	•	Types of Tools:
	•	Automatically executed server-side tools.
	•	Automatically executed client-side tools.
	•	User-interactive tools requiring confirmation dialogs.
	•	Workflow:
	1.	User inputs a message in the chat UI.
	2.	Message is sent to the API route.
	3.	Language model generates tool calls via streamText.
	4.	Tool calls are forwarded to the client.
	5.	Server-side tools execute and return results to the client.
	6.	Client-side tools auto-execute using the onToolCall callback.
	7.	Interactive tools display in the UI, results managed via toolInvocations.
	8.	After interactions, use addToolResult to include the result in the chat.
	9.	If tool calls exist in the last message and all results are available, the client resends messages to the server for further processing.
	•	Note: Set maxSteps to a value greater than 1 in useChat options to enable multiple iterations (default is disabled for compatibility).

Example Implementation:

	•	API Route (app/api/chat/route.ts):

import { openai } from '@ai-sdk/openai';
import { streamText } from 'ai';
import { z } from 'zod';

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = await streamText({
    model: openai('gpt-4o'),
    messages,
    tools: {
      // Server-side tool with execute function:
      getWeatherInformation: {
        description: 'Show the weather in a given city to the user.',
        parameters: z.object({ city: z.string() }),
        execute: async ({ city }: { city: string }) => {
          const weatherOptions = ['sunny', 'cloudy', 'rainy', 'snowy', 'windy'];
          return `${city} is currently ${weatherOptions[Math.floor(Math.random() * weatherOptions.length)]}.`;
        },
      },
      // Client-side tool initiating user interaction:
      askForConfirmation: {
        description: 'Ask the user for confirmation.',
        parameters: z.object({
          message: z.string().describe('The message to ask for confirmation.'),
        }),
      },
      // Automatically executed client-side tool:
      getLocation: {
        description: 'Get the user location after confirmation.',
        parameters: z.object({}),
      },
    },
  });

  return result.toDataStreamResponse();
}


	•	Client-Side Page (app/page.tsx):

'use client';

import { ToolInvocation } from 'ai';
import { Message, useChat } from 'ai/react';

export default function Chat() {
  const {
    messages,
    input,
    handleInputChange,
    handleSubmit,
    addToolResult,
  } = useChat({
    maxSteps: 5,

    // Handle automatically executed client-side tools:
    async onToolCall({ toolCall }) {
      if (toolCall.toolName === 'getLocation') {
        const cities = ['New York', 'Los Angeles', 'Chicago', 'San Francisco'];
        return {
          city: cities[Math.floor(Math.random() * cities.length)],
        };
      }
    },
  });

  return (
    <>
      {messages?.map((m: Message) => (
        <div key={m.id}>
          <strong>{m.role}:</strong> {m.content}
          {m.toolInvocations?.map((toolInvocation: ToolInvocation) => {
            const toolCallId = toolInvocation.toolCallId;
            const addResult = (result: string) =>
              addToolResult({ toolCallId, result });

            // Render confirmation tool (client-side with user interaction)
            if (toolInvocation.toolName === 'askForConfirmation') {
              return (
                <div key={toolCallId}>
                  {toolInvocation.args.message}
                  <div>
                    {'result' in toolInvocation ? (
                      <b>{toolInvocation.result}</b>
                    ) : (
                      <>
                        <button onClick={() => addResult('Yes')}>Yes</button>
                        <button onClick={() => addResult('No')}>No</button>
                      </>
                    )}
                  </div>
                </div>
              );
            }

            // Display results of other tools
            return 'result' in toolInvocation ? (
              <div key={toolCallId}>
                <em>Tool ({toolInvocation.toolName}):</em> {toolInvocation.result}
              </div>
            ) : (
              <div key={toolCallId}>
                <em>Executing {toolInvocation.toolName}...</em>
              </div>
            );
          })}
          <br />
        </div>
      ))}

      <form onSubmit={handleSubmit}>
        <input value={input} onChange={handleInputChange} placeholder="Type your message..." />
      </form>
    </>
  );
}



Additional Notes:

	•	Ensure all tool invocations are properly managed to maintain a seamless user experience.
	•	Regularly update dependencies and libraries to their latest versions for improved performance and security.
	•	Test the chatbot thoroughly to handle edge cases and unexpected user inputs.

This revised prompt organizes the information more clearly, making it easier to understand and follow. It highlights key project guidelines, structures, and code examples, providing a comprehensive overview for anyone involved in the development process.

## Access to screenpipe

Screenpipe is a tool that wathces your screen and audio and stores the data in a local database.

hyprsqrl uses screenpipe api that it expoed on localhost:3030 to get the data from screenpipe. and use ocr to figure out when to add a task or create a calendar event.

api reference for screenpipe
below is the detailed api reference for screenpipe's core functionality.

search api
endpoint: /search
method: get
description: searches captured data (ocr, audio transcriptions, etc.) stored in screenpipe's local database.
query parameters:
q (string, optional): search term (a SINGLE word)
content_type (enum): type of content to search:
ocr: optical character recognition text
audio: audio transcriptions
ui: user interface elements
limit (int): max results per page (default: 20)
offset (int): pagination offset
start_time (timestamp, optional): filter by start timestamp
end_time (timestamp, optional): filter by end timestamp
app_name (string, optional): filter by application name
window_name (string, optional): filter by window name
include_frames (bool, optional): include base64 encoded frames
min_length (int, optional): minimum content length
max_length (int, optional): maximum content length
speaker_ids (int[], optional): filter by specific speaker ids
sample requests:
# Basic search
curl "http://localhost:3030/search?q=meeting&content_type=ocr&limit=10"
 
# Audio search with speaker filter
curl "http://localhost:3030/search?content_type=audio&speaker_ids=1,2"
 
# UI elements search
curl "http://localhost:3030/search?content_type=ui&app_name=chrome"
sample response:
{
  "data": [
    {
      "type": "OCR",
      "content": {
        "frame_id": 123,
        "text": "meeting notes",
        "timestamp": "2024-03-10T12:00:00Z",
        "file_path": "/frames/frame123.png",
        "offset_index": 0,
        "app_name": "chrome",
        "window_name": "meeting",
        "tags": ["meeting"],
        "frame": "base64_encoded_frame_data" 
      }
    }
  ],
  "pagination": {
    "limit": 5,
    "offset": 0,
    "total": 100
  }
}
audio devices api
endpoint: /audio/list
method: get
description: lists available audio input/output devices
sample response:
[
  {
    "name": "built-in microphone",
    "is_default": true
  }
]
monitors api
endpoint: /vision/list
method: post
description: lists available monitors/displays
sample response:
[
  {
    "id": 1,
    "name": "built-in display",
    "width": 2560,
    "height": 1600,
    "is_default": true
  }
]
tags api
endpoint: /tags/:content_type/:id
methods: post (add), delete (remove)
description: manage tags for content items
content_type: vision or audio
add tags request:
{
  "tags": ["important", "meeting"]
}
sample response:
{
  "success": true
}
pipes api
list pipes
endpoint: /pipes/list
method: get
download pipe
endpoint: /pipes/download
method: post
{
  "url": "https://github.com/user/repo/pipe-example"
}
enable pipe
endpoint: /pipes/enable
method: post
{
  "pipe_id": "pipe-example"
}
disable pipe
endpoint: /pipes/disable
method: post
{
  "pipe_id": "pipe-example" 
}
update pipe config
endpoint: /pipes/update
method: post
{
  "pipe_id": "pipe-example",
  "config": {
    "key": "value"
  }
}
speakers api
list unnamed speakers
endpoint: /speakers/unnamed
method: get
description: get list of speakers without names assigned
query parameters:
limit (int): max results
offset (int): pagination offset
speaker_ids (int[], optional): filter specific speaker ids
sample request:
curl "http://localhost:3030/speakers/unnamed?limit=10&offset=0"
search speakers
endpoint: /speakers/search
method: get
description: search speakers by name
query parameters:
name (string, optional): name prefix to search for
sample request:
curl "http://localhost:3030/speakers/search?name=john"
update speaker
endpoint: /speakers/update
method: post
description: update speaker name or metadata
request body:
{
  "id": 123,
  "name": "john doe",
  "metadata": "{\"role\": \"engineer\"}"
}
delete speaker
endpoint: /speakers/delete
method: post
description: delete a speaker and associated audio chunks
request body:
{
  "id": 123
}
get similar speakers
endpoint: /speakers/similar
method: get
description: find speakers with similar voice patterns
query parameters:
speaker_id (int): reference speaker id
limit (int): max results
sample request:
curl "http://localhost:3030/speakers/similar?speaker_id=123&limit=5"
merge speakers
endpoint: /speakers/merge
method: post
description: merge two speakers into one
request body:
{
  "speaker_to_keep_id": 123,
  "speaker_to_merge_id": 456
}
mark as hallucination
endpoint: /speakers/hallucination
method: post
description: mark a speaker as incorrectly identified
request body:
{
  "speaker_id": 123
}
health api
endpoint: /health
method: get
description: system health status
sample response:
{
  "status": "healthy",
  "last_frame_timestamp": "2024-03-10T12:00:00Z", 
  "last_audio_timestamp": "2024-03-10T12:00:00Z",
  "last_ui_timestamp": "2024-03-10T12:00:00Z",
  "frame_status": "ok",
  "audio_status": "ok",
  "ui_status": "ok",
  "message": "all systems functioning normally"
}
stream frames api
endpoint: /stream/frames
method: get
description: stream frames as server-sent events (sse)
query parameters:
start_time (timestamp): start time for frame stream
end_time (timestamp): end time for frame stream
sample request:
curl "http://localhost:3030/stream/frames?start_time=2024-03-10T12:00:00Z&end_time=2024-03-10T13:00:00Z"
sample event data:
{
  "timestamp": "2024-03-10T12:00:00Z",
  "devices": [
    {
      "device_id": "screen-1",
      "frame": "base64_encoded_frame_data"
    }
  ]
}
