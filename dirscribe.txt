File: ./packages/desktop/vite.config.ts
import { rmSync } from 'node:fs'
import path from 'node:path'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import electron from 'vite-plugin-electron/simple'
import pkg from './package.json'

// https://vitejs.dev/config/
export default defineConfig(({ command }) => {
  rmSync('dist-electron', { recursive: true, force: true })

  const isServe = command === 'serve'
  const isBuild = command === 'build'
  const sourcemap = isServe || !!process.env.VSCODE_DEBUG

  return {
    resolve: {
      alias: {
        '@': path.join(__dirname, 'src')
      },
    },
    plugins: [
      react(),
      electron({
        main: {
          // Shortcut of `build.lib.entry`
          entry: 'electron/main.ts',
          onstart(args) {
            if (process.env.VSCODE_DEBUG) {
              console.log(/* For `.vscode/.debug.script.mjs` */'[startup] Electron App')
            } else {
              args.startup()
            }
          },
          vite: {
            build: {
              sourcemap,
              minify: isBuild,
              outDir: 'dist-electron/',
              rollupOptions: {
                external: Object.keys('dependencies' in pkg ? pkg.dependencies : {}),
              },
            },
          },
        },
        preload: {
          // Shortcut of `build.rollupOptions.input`.
          // Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.
          input: 'electron/preload.ts',
          vite: {
            build: {
              sourcemap: sourcemap ? 'inline' : undefined, // #332
              minify: isBuild,
              outDir: 'dist-electron/',
              rollupOptions: {
                external: Object.keys('dependencies' in pkg ? pkg.dependencies : {}),
              },
            },
          },
        },
        // Ployfill the Electron and Node.js API for Renderer process.
        // If you want use Node.js in Renderer process, the `nodeIntegration` needs to be enabled in the Main process.
        // See ðŸ‘‰ https://github.com/electron-vite/vite-plugin-electron-renderer
        renderer: {},
      }),
    ],
    server: process.env.VSCODE_DEBUG && (() => {
      const url = new URL(pkg.debug.env.VITE_DEV_SERVER_URL)
      return {
        host: url.hostname,
        port: +url.port,
      }
    })(),
    clearScreen: false,
  }
})

File: ./packages/desktop/electron/main.ts
import { app, BrowserWindow, shell, ipcMain, dialog } from 'electron';
import { createRequire } from 'node:module';
import { fileURLToPath } from 'node:url';
import path from 'node:path';
import os from 'node:os';
import isDev from 'electron-is-dev';
import { promises as fs, Stats } from 'fs';
import * as chokidar from 'chokidar';
import fg from 'fast-glob';

// Setup __dirname equivalent for ES modules
const require = createRequire(import.meta.url);
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Path configurations
process.env.APP_ROOT = path.join(__dirname, '../..');
export const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron');
export const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist');
export const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL;

process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL
  ? path.join(process.env.APP_ROOT, 'public')
  : RENDERER_DIST;

// Windows-specific configurations
if (os.release().startsWith('6.1')) app.disableHardwareAcceleration();
if (process.platform === 'win32') app.setAppUserModelId(app.getName());

// Single instance lock
if (!app.requestSingleInstanceLock()) {
  app.quit();
  process.exit(0);
}

// Window management
let win: BrowserWindow | null = null;
const preload = path.join(__dirname, './preload.js');

// Replace electron-store with custom store implementation
class VaultStore {
  private storePath: string;
  private cache: Record<string, any> = {};

  constructor() {
    // Store in user data directory
    const userDataPath = app.getPath('userData');
    this.storePath = path.join(userDataPath, 'vault-config.json');
    this.loadStore();
  }

  private async loadStore() {
    try {
      const data = await fs.readFile(this.storePath, 'utf8');
      this.cache = JSON.parse(data);
    } catch (error) {
      // If file doesn't exist or is invalid, start with empty cache
      this.cache = {};
    }
  }

  private async saveStore() {
    try {
      await fs.writeFile(this.storePath, JSON.stringify(this.cache, null, 2));
    } catch (error) {
      console.error('Failed to save store:', error);
    }
  }

  get(key: string) {
    return this.cache[key];
  }

  async set(key: string, value: any) {
    this.cache[key] = value;
    await this.saveStore();
  }
}

const store = new VaultStore();

async function createWindow() {
  win = new BrowserWindow({
    width: 1200,
    height: 800,
    icon: path.join(process.env.VITE_PUBLIC!, 'favicon.ico'),
    webPreferences: {
      preload,
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  if (VITE_DEV_SERVER_URL) {
    win.loadURL(VITE_DEV_SERVER_URL);
    win.webContents.openDevTools();
  } else {
    win.loadFile(path.join(RENDERER_DIST, 'index.html'));
  }

  // Test actively push message to the Electron-Renderer
  win.webContents.on('did-finish-load', () => {
    win?.webContents.send('main-process-message', new Date().toLocaleString());
  });

  // Make all links open with the browser, not with the application
  win.webContents.setWindowOpenHandler(({ url }) => {
    if (url.startsWith('https:')) shell.openExternal(url);
    return { action: 'deny' };
  });
}

// App lifecycle events
app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  win = null;
  if (process.platform !== 'darwin') app.quit();
});

app.on('second-instance', () => {
  if (win) {
    if (win.isMinimized()) win.restore();
    win.focus();
  }
});

app.on('activate', () => {
  const allWindows = BrowserWindow.getAllWindows();
  if (allWindows.length) {
    allWindows[0].focus();
  } else {
    createWindow();
  }
});

// Keep your existing IPC handlers but add this new one:
ipcMain.handle('open-win', (_, arg) => {
  const childWindow = new BrowserWindow({
    webPreferences: {
      preload,
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  if (VITE_DEV_SERVER_URL) {
    childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`);
  } else {
    childWindow.loadFile(path.join(RENDERER_DIST, 'index.html'), { hash: arg });
  }
});

// Handle IPC events
ipcMain.handle('vault:get-config', async () => {
  return store.get('vaultConfig');
});

ipcMain.handle('vault:save-config', async (_, config) => {
  await store.set('vaultConfig', config);
  return true;
});
// Add this with your other IPC handlers
ipcMain.handle('file:get-stats', async (_, filePath: string) => {
  try {
    const stats = await fs.stat(filePath);
    return {
      birthtime: stats.birthtime.toISOString(),
      mtime: stats.mtime.toISOString(),
      atime: stats.atime.toISOString(),
    };
  } catch (error) {
    console.error('Failed to get file stats:', error);
    throw error;
  }
});

// Keep track of watchers
const watchers = new Map<string, chokidar.FSWatcher>();

// Update the file watching handlers
ipcMain.handle('file:watch', async (event, folderPath: string) => {
  debug('Setting up watcher for folder:', folderPath);

  // Clean up existing watcher if any
  if (watchers.has(folderPath)) {
    const existingWatcher = watchers.get(folderPath);
    if (existingWatcher) {
      await existingWatcher.close();
      watchers.delete(folderPath);
    }
  }

  const watcher = chokidar.watch(folderPath, {
    ignored: /(^|[\/\\])\../, // ignore dotfiles
    persistent: true,
    ignoreInitial: true,
  });

  // Send file change events back to renderer
  watcher
    .on('add', path => event.sender.send('file:changed', { type: 'add', path }))
    .on('change', path => event.sender.send('file:changed', { type: 'change', path }))
    .on('unlink', path => event.sender.send('file:changed', { type: 'unlink', path }));

  watchers.set(folderPath, watcher);
  return true;
});

ipcMain.handle('file:unwatch', async (_, folderPath: string) => {
  debug('Removing watcher for folder:', folderPath);
  const watcher = watchers.get(folderPath);
  if (watcher) {
    await watcher.close();
    watchers.delete(folderPath);
  }
  return true;
});

// Clean up watchers when app quits
app.on('before-quit', () => {
  watchers.forEach(watcher => watcher.close());
  watchers.clear();
});

ipcMain.handle('folder:list-contents', async (_, folderPath) => {
  const files = await fs.readdir(folderPath, { withFileTypes: true });
  return files.map((file) => ({
    name: file.name,
    isDirectory: file.isDirectory(),
    path: path.join(folderPath, file.name),
  }));
});

ipcMain.handle('vault:select-directory', async () => {
  const result = await dialog.showOpenDialog({
    properties: ['openDirectory'],
  });

  if (result.canceled) {
    return { success: false };
  }

  const vaultPath = result.filePaths[0];

  // Check if it's an Obsidian vault by looking for .obsidian folder
  const isObsidian = await fs
    .access(path.join(vaultPath, '.obsidian'))
    .then(() => true)
    .catch(() => false);

  return {
    success: true,
    path: vaultPath,
    isObsidian,
  };
});

ipcMain.handle('vault:create-new', async () => {
  const result = await dialog.showOpenDialog({
    properties: ['openDirectory'],
  });

  if (result.canceled) {
    return { success: false };
  }

  const vaultPath = result.filePaths[0];

  // Create necessary directories
  await fs.mkdir(path.join(vaultPath, '.hyprsqrl'), { recursive: true });
  await fs.mkdir(path.join(vaultPath, 'Daily'), { recursive: true });
  await fs.mkdir(path.join(vaultPath, 'Tasks'), { recursive: true });
  await fs.mkdir(path.join(vaultPath, 'Notes'), { recursive: true });

  // Create initial README
  const readmePath = path.join(vaultPath, 'README.md');
  const readmeContent = `---
created: ${new Date().toISOString()}
type: root
---

# Welcome to Your HyprSqrl Vault

This vault is compatible with Obsidian and organized for optimal productivity.

## Folders

- Daily: For your daily notes
- Tasks: For task management
- Notes: For general notes and documentation
`;

  await fs.writeFile(readmePath, readmeContent);

  return {
    success: true,
    path: vaultPath,
    isObsidian: false,
  };
});

// File operations
function parseFrontMatter(content: string) {
  const frontMatterRegex = /^---\n([\s\S]*?)\n---\n([\s\S]*)$/;
  const match = content.match(frontMatterRegex);

  if (!match) {
    return {
      data: {},
      content: content
    };
  }

  try {
    const [, frontMatter, markdownContent] = match;
    const data = frontMatter
      .split('\n')
      .filter(line => line.trim())
      .reduce((acc, line) => {
        const [key, ...values] = line.split(':');
        const value = values.join(':').trim();
        // Handle basic types
        if (value === 'true') acc[key.trim()] = true;
        else if (value === 'false') acc[key.trim()] = false;
        else if (!isNaN(Number(value))) acc[key.trim()] = Number(value);
        else acc[key.trim()] = value;
        return acc;
      }, {} as Record<string, any>);

    return {
      data,
      content: markdownContent.trim()
    };
  } catch (error) {
    console.error('Error parsing frontmatter:', error);
    return {
      data: {},
      content: content
    };
  }
}

ipcMain.handle('file:read-markdown', async (_, filePath) => {
  try {
    const content = await fs.readFile(filePath, 'utf-8');
    const stats = await fs.stat(filePath);
    const { data: frontMatter, content: markdownContent } = parseFrontMatter(content);
    
    return { 
      content: markdownContent, 
      frontMatter,
      stats: {
        created: stats.birthtime.toISOString(),
        modified: stats.mtime.toISOString(),
        accessed: stats.atime.toISOString(),
      }
    };
  } catch (error) {
    console.error('Error reading markdown file:', error);
    throw error;
  }
});

ipcMain.handle('file:write-markdown', async (_, filePath, content) => {
  await fs.writeFile(filePath, content);
  return true;
});

// Add this debug logging function
const debug = (...args: any[]) => {
  if (isDev) {
    console.log('[Main Process]', ...args);
  }
};

ipcMain.handle('file:list', async (_, directory) => {
  debug('Listing files for directory:', directory);

  if (!directory || typeof directory !== 'string') {
    debug('Invalid directory argument:', directory);
    throw new Error(
      `Directory path is required and must be a string. Received: ${typeof directory}`
    );
  }

  try {
    const files = await fs.readdir(directory, { withFileTypes: true });
    const fileList = files.map((file) => ({
      name: file.name,
      isDirectory: file.isDirectory(),
      path: path.join(directory, file.name),
    }));
    debug('Found files:', fileList.length);
    return fileList;
  } catch (error) {
    debug('Error listing files:', error);
    if (error instanceof Error) {
      throw new Error(`Failed to list files: ${error.message}`);
    }
    throw error;
  }
});

// Add this with your other IPC handlers
ipcMain.handle('file:reveal-in-system', async (_event, path: string) => {
  if (!path) {
    throw new Error('Path is required to reveal in file system');
  }

  try {
    // Show the given file in a file manager. If possible, select the file.
    await shell.showItemInFolder(path);
  } catch (error) {
    console.error('Failed to reveal item in file system:', error);
    throw error;
  }
});

// Add this near your other IPC handlers:
ipcMain.handle('folder:watch', async (event, folderPath: string) => {
  debug('Setting up watcher for folder:', folderPath);

  // Clean up existing watcher if any
  if (watchers.has(folderPath)) {
    watchers.get(folderPath)?.close();
    watchers.delete(folderPath);
  }

  const watcher = chokidar.watch(folderPath, {
    ignored: /(^|[\/\\])\../, // ignore dotfiles
    persistent: true,
    ignoreInitial: true,
  });

  watcher.on('all', async (eventName, path) => {
    debug(`File event: ${eventName} on ${path}`);
    // Send the entire folder contents instead of just the changed path
    const files = await fs.readdir(folderPath, { withFileTypes: true });
    const fileList = files.map((file) => ({
      name: file.name,
      isDirectory: file.isDirectory(),
      // path: path.join(folderPath, file.name)
    }));
    event.sender.send('folder:changed', fileList);
  });

  watchers.set(folderPath, watcher);
  return true;
});

ipcMain.handle('folder:unwatch', async (_, folderPath: string) => {
  debug('Removing watcher for folder:', folderPath);
  const watcher = watchers.get(folderPath);
  if (watcher) {
    await watcher.close();
    watchers.delete(folderPath);
  }
  return true;
});

// Add this when the app is quitting to clean up watchers
app.on('before-quit', () => {
  watchers.forEach((watcher) => watcher.close());
  watchers.clear();
});

// Add this with your other IPC handlers
ipcMain.handle('file:list-markdown', async (_, directory) => {
  debug('Listing markdown files for directory:', directory);

  if (!directory || typeof directory !== 'string') {
    debug('Invalid directory argument:', directory);
    throw new Error(
      `Directory path is required and must be a string. Received: ${typeof directory}`
    );
  }

  try {
    const files = await fs.readdir(directory, { withFileTypes: true });
    const fileList = files
      .filter(
        (file) =>
          // Include directories and .md files
          file.isDirectory() || file.name.toLowerCase().endsWith('.md')
      )
      .map((file) => ({
        name: file.name,
        isDirectory: file.isDirectory(),
        path: path.join(directory, file.name),
      }));

    debug('Found markdown files:', fileList.length);
    return fileList;
  } catch (error) {
    debug('Error listing markdown files:', error);
    if (error instanceof Error) {
      throw new Error(`Failed to list markdown files: ${error.message}`);
    }
    throw error;
  }
});

// Add this with your other IPC handlers
ipcMain.handle('shell:open-external', async (_, url: string) => {
  if (!url) {
    throw new Error('URL is required to open external link');
  }

  try {
    await shell.openExternal(url);
    return true;
  } catch (error) {
    console.error('Failed to open external URL:', error);
    throw error;
  }
});

// Add this new IPC handler
ipcMain.handle('tasks:get-all', async (_, vaultPath: string) => {
  try {
    // Find all markdown files in the vault using fast-glob instead of globby
    const files = await fg(['**/*.md'], {
      cwd: vaultPath,
      absolute: true,
      ignore: ['node_modules', '.git', '.obsidian'],
    })
    console.log('Found files:', files)

    const tasks = []
    const taskRegex = /^- \[([ xX])\] (.+)$/gm
    const tagsRegex = /#[\w-]+/g

    for (const filePath of files) {
      try {
        const content = await fs.readFile(filePath, 'utf-8')
        const stats = await fs.stat(filePath)

        let match
        while ((match = taskRegex.exec(content)) !== null) {
          const [fullMatch, checkmark, title] = match
          
          // Get the context by looking at the lines around the task
          const lines = content.split('\n')
          const taskLineIndex = lines.findIndex(line => line.includes(fullMatch))
          const contextStart = Math.max(0, taskLineIndex - 2)
          const contextEnd = Math.min(lines.length, taskLineIndex + 3)
          const context = lines.slice(contextStart, contextEnd).join('\n')

          // Extract tags from the task title
          const tags = title.match(tagsRegex) || []

          // Generate a stable ID based on file path and task content
          const taskId = Buffer.from(`${filePath}:${fullMatch}`).toString('base64')

          tasks.push({
            id: taskId,
            title: title.trim(),
            completed: checkmark === 'x' || checkmark === 'X',
            filePath,
            tags: tags.map(tag => tag.slice(1)), // Remove # from tags
            context,
            stats: {
              created: stats.birthtime.toISOString(),
              modified: stats.mtime.toISOString(),
            },
            obsidianUrl: `obsidian://open?vault=${encodeURIComponent(path.basename(vaultPath))}&file=${encodeURIComponent(path.relative(vaultPath, filePath))}`,
          })
        }
      } catch (error) {
        console.error(`Error processing file ${filePath}:`, error)
        continue
      }
    }

    return tasks
  } catch (error) {
    console.error('Error getting tasks:', error)
    throw error
  }
})


File: ./packages/desktop/electron/types.ts
export interface VaultConfig {
  path: string;
  isObsidian: boolean;
  lastOpened: string;
  vaultName?: string;
}

export interface FileInfo {
  name: string;
  isDirectory: boolean;
  path: string;
}

export interface MarkdownContent {
  frontMatter: any;
  content: string;
} 

File: ./packages/desktop/electron/preload.ts
import { contextBridge, ipcRenderer, IpcRendererEvent, shell } from 'electron';
import type { VaultConfig, FileInfo, MarkdownContent } from './types';
const debug = (...args: any[]) => {
  console.log('[Preload]', ...args);
};

// Type-safe wrapper for IPC calls
const api = {
  // Vault management
  getVaultConfig: async () => {
    debug('Getting vault config');
    return ipcRenderer.invoke(
      'vault:get-config'
    ) as Promise<VaultConfig | null>;
  },
  saveVaultConfig: (config: VaultConfig) =>
    ipcRenderer.invoke('vault:save-config', config) as Promise<boolean>,
  selectVaultDirectory: () =>
    ipcRenderer.invoke('vault:select-directory') as Promise<{
      success: boolean;
      path?: string;
      isObsidian?: boolean;
    }>,
  createNewVault: () =>
    ipcRenderer.invoke('vault:create-new') as Promise<{
      success: boolean;
      path?: string;
      isObsidian?: boolean;
    }>,

  // File operations
  readMarkdownFile: (path: string) => {
    if (!path) throw new Error('Path is required for reading markdown file');
    return ipcRenderer.invoke(
      'file:read-markdown',
      path
    ) as Promise<MarkdownContent>;
  },
  writeMarkdownFile: (path: string, content: string) => {
    console.log('Writing markdown file to:', path);
    if (!path) throw new Error('Path is required for writing markdown file');
    return ipcRenderer.invoke(
      'file:write-markdown',
      path,
      content
    ) as Promise<boolean>;
  },
  getFileStats: async (filePath: string) => {
    return ipcRenderer.invoke('file:get-stats', filePath);
  },
  listFiles: async (directory: string) => {
    debug('Listing files for directory:', directory);
    if (!directory || typeof directory !== 'string') {
      throw new Error(
        `Directory path is required and must be a string. Received: ${typeof directory}`
      );
    }
    try {
      const files = (await ipcRenderer.invoke(
        'file:list',
        directory
      )) as FileInfo[];
      debug('Files received:', files.length);
      return files;
    } catch (error) {
      debug('Error listing files:', error);
      throw error;
    }
  },

  createTask: async (taskData: { name: string; description: string }) => {
    const config = await ipcRenderer.invoke('vault:get-config');
    if (!config?.path) {
      throw new Error('No vault configured');
    }

    return ipcRenderer.invoke('task:create', {
      ...taskData,
      vaultPath: config.path,
    });
  },
  watchFiles: (path: string, callback: (path: string) => void) => {
    debug('Setting up file watcher for:', path);
    
    // Remove any existing listeners
    ipcRenderer.removeAllListeners('file:changed');
    
    // Add new listener that calls the callback with the changed path
    ipcRenderer.on('file:changed', (_, data: { type: string, path: string }) => {
      callback(data.path);
    });
    
    return ipcRenderer.invoke('file:watch', path);
  },

  unwatchFiles: (path: string) => {
    debug('Removing file watcher for:', path);
    ipcRenderer.removeAllListeners('file:changed');
    return ipcRenderer.invoke('file:unwatch', path);
  },

  listFolderContents: async (folderPath: string) => {
    debug('Listing contents for folder:', folderPath);
    if (!folderPath || typeof folderPath !== 'string') {
      throw new Error('Folder path is required and must be a string');
    }
    try {
      const files = (await ipcRenderer.invoke(
        'folder:list-contents',
        folderPath
      )) as FileInfo[];
      debug('Folder contents received:', files.length);
      return files;
    } catch (error) {
      debug('Error listing folder contents:', error);
      throw error;
    }
  },

  revealInFileSystem: (path: string) => {
    debug('Revealing path in file system:', path);
    if (!path || typeof path !== 'string') {
      throw new Error('Path is required and must be a string');
    }
    return ipcRenderer.invoke('file:reveal-in-system', path) as Promise<void>;
  },

  writeMarkdownToVault: async (name: string, content: string) => {
    debug('Writing markdown to vault:', name);

    const config = (await ipcRenderer.invoke(
      'vault:get-config'
    )) as VaultConfig | null;
    if (!config?.path) {
      throw new Error('No vault configured');
    }

    // Ensure name has .md extension
    const fileName = name.endsWith('.md') ? name : `${name}.md`;
    const fullPath = `${config.path}/${fileName}`;

    return ipcRenderer.invoke(
      'file:write-markdown',
      fullPath,
      content
    ) as Promise<boolean>;
  },

  // File watching with correct types
  watchFolder: (
    folderPath: string,
    callback: (event: IpcRendererEvent, files: FileInfo[]) => void
  ) => {
    debug('Setting up watcher for:', folderPath);
    // Remove any existing listeners first to prevent duplicates
    ipcRenderer.removeAllListeners('folder:changed');
    // Add the new listener
    ipcRenderer.on('folder:changed', callback);
    // Start watching on the main process
    return ipcRenderer.invoke('folder:watch', folderPath);
  },

  unwatchFolder: (folderPath: string) => {
    debug('Removing watcher for:', folderPath);
    ipcRenderer.removeAllListeners('folder:changed');
    // Stop watching on the main process
    return ipcRenderer.invoke('folder:unwatch', folderPath);
  },

  analyzeMarkdownForTasks: async (filePath: string) => {
    const content = await ipcRenderer.invoke('file:read-markdown', filePath);
    // Use regex to find tasks in markdown content
    const taskRegex = /- \[([ x])\] (.*)/g;
    const tasks: Array<{
      completed: boolean;
      title: string;
      tags: string[];
    }> = [];

    let match;
    while ((match = taskRegex.exec(content)) !== null) {
      const completed = match[1] === 'x';
      const title = match[2];
      const tags = title.match(/#[a-zA-Z0-9-_]+/g) || [];
      tasks.push({ completed, title, tags });
    }

    return tasks;
  },


  findLinkedNotes: async (filePath: string) => {
    const content = await ipcRenderer.invoke('file:read-markdown', filePath);
    // Find wiki-style links [[Note Name]]
    const linkRegex = /\[\[(.*?)\]\]/g;
    const links = new Set<string>();

    let match;
    while ((match = linkRegex.exec(content)) !== null) {
      links.add(match[1]);
    }

    return Array.from(links);
  },
  openExternal: (url: string) => {
    debug('Opening external URL:', url);
    if (!url) throw new Error('URL is required for opening external link');
    return ipcRenderer.invoke('shell:open-external', url);
  },
  listMarkdownFiles: async (directory: string) => {
    debug('Listing markdown files for directory:', directory);
    if (!directory || typeof directory !== 'string') {
      throw new Error(
        `Directory path is required and must be a string. Received: ${typeof directory}`
      );
    }
    try {
      const files = (await ipcRenderer.invoke(
        'file:list-markdown',
        directory
      )) as FileInfo[];
      debug('Markdown files received:', files.length);
      return files;
    } catch (error) {
      debug('Error listing markdown files:', error);
      throw error;
    }
  },

  getAllTasks: async (vaultPath: string) => {
    debug('Getting all tasks from vault:', vaultPath)
    if (!vaultPath) throw new Error('Vault path is required')
    return ipcRenderer.invoke('tasks:get-all', vaultPath)
  },
} as const;

// Expose the API to the renderer process
contextBridge.exposeInMainWorld('api', api);

// Type checking
export type API = typeof api;


File: ./packages/desktop/src/renderer/app.tsx
import React, { useState, useEffect } from 'react';
import { Button } from '@/renderer/components/ui/button';
import { MarkdownEditor } from './components/markdown-editor';
import type { VaultConfig } from '@/renderer/types';
import { FileExplorer } from './components/file-explorer';
import { TaskDashboard } from './components/task-dashboard';
import { Folder, FileText } from 'lucide-react';
import { useEditorStore } from './stores/editor-store';
import { cn } from '@/lib/utils';
import DashboardPage from '@/app/page';

export function App() {
  const [vaultConfig, setVaultConfig] = useState<VaultConfig | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isFileExplorerCollapsed, setIsFileExplorerCollapsed] = useState(true);
  const [isEditorCollapsed, setIsEditorCollapsed] = useState(true);
  const { activeFile } = useEditorStore();

  // Load vault config
  useEffect(() => {
    const checkVaultConfig = async () => {
      try {
        const config = await window.api.getVaultConfig();
        if (config?.path) {
          setVaultConfig(config);
        }
      } catch (error) {
        console.error('Failed to get vault config:', error);
      } finally {
        setIsLoading(false);
      }
    };

    checkVaultConfig();
  }, []);

  // Show editor when a file is active
  useEffect(() => {
    if (activeFile && isEditorCollapsed) {
      setIsEditorCollapsed(false);
    }
  }, [activeFile]);

  if (isLoading) {
    return <div>Loading...</div>;
  }
  return <DashboardPage />

  return (
    <div className="h-screen grid" style={{
      gridTemplateColumns: `
        ${isFileExplorerCollapsed ? '3rem' : '250px'} 
        1fr 
        ${!isEditorCollapsed ? '400px' : '3rem'}
      `
    }}>
      {/* File Explorer */}
      {isFileExplorerCollapsed ? (
        <div className="border-r bg-background flex flex-col items-center py-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsFileExplorerCollapsed(false)}
          >
            <Folder className="h-5 w-5" />
          </Button>
        </div>
      ) : (
        <div className="border-r bg-background relative">
          <Button
            variant="ghost"
            size="icon"
            className="absolute right-2 top-2"
            onClick={() => setIsFileExplorerCollapsed(true)}
          >
            <Folder className="h-5 w-5" />
          </Button>
          {vaultConfig && (
            <FileExplorer
              vaultPath={vaultConfig.path}
              onSelectVault={async () => {
                try {
                  const result = await window.api.selectVaultDirectory();
                  if (result.success && result.path) {
                    await window.api.saveVaultConfig({ path: result.path });
                    setVaultConfig({ path: result.path });
                  }
                } catch (error) {
                  console.error('Failed to select vault:', error);
                }
              }}
              onCreateVault={() => {}}
            />
          )}
        </div>
      )}

      {/* Main Content */}
      <div className="overflow-auto">
        {vaultConfig && <TaskDashboard vaultPath={vaultConfig.path} />}
      </div>

      {/* Editor */}
      <div className={cn(
        "border-l bg-background transition-all duration-200",
        isEditorCollapsed && !activeFile && "hidden"
      )}>
        {isEditorCollapsed ? (
          <div className="flex flex-col items-center py-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsEditorCollapsed(false)}
            >
              <FileText className="h-5 w-5" />
            </Button>
          </div>
        ) : (
          <div className="h-full relative">
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-2 top-2"
              onClick={() => setIsEditorCollapsed(true)}
            >
              <FileText className="h-5 w-5" />
            </Button>
            <MarkdownEditor />
          </div>
        )}
      </div>
    </div>
  );
}


File: ./packages/desktop/src/renderer/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import { App } from './app'
import './styles/globals.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
) 

File: ./packages/desktop/src/renderer/types/window.d.ts
import type { API } from '../../preload'
import type { VaultConfig } from '../types'

declare global {
  interface Window {
    api: API;
  }
}

export {} 

File: ./packages/desktop/src/renderer/stores/task-store.ts
import { create } from 'zustand'
import { getAllTasks } from '@/renderer/task-utils'
import type { Task } from '@/renderer/task-utils'

interface TaskState {
  tasks: Task[]
  filteredTasks: Task[]
  isLoading: boolean
  error: Error | null
  loadTasks: (vaultPath: string) => Promise<void>
  updateTask: (taskId: string, updates: Partial<Task>) => void
  setFilteredTasks: (tasks: Task[]) => void
}

export const useTaskStore = create<TaskState>((set, get) => ({
  tasks: [],
  filteredTasks: [],
  isLoading: false,
  error: null,

  loadTasks: async (vaultPath: string) => {
    set({ isLoading: true })
    try {
      const tasks = await getAllTasks(vaultPath)
      set({ tasks, filteredTasks: tasks, isLoading: false })
    } catch (error) {
      set({ error: error as Error, isLoading: false })
    }
  },

  updateTask: (taskId: string, updates: Partial<Task>) => {
    set((state) => {
      const updatedTasks = state.tasks.map((task) =>
        task.id === taskId ? { ...task, ...updates } : task
      )
      return {
        tasks: updatedTasks,
        filteredTasks: state.filteredTasks.map((task) =>
          task.id === taskId ? { ...task, ...updates } : task
        ),
      }
    })
  },

  setFilteredTasks: (tasks: Task[]) => set({ filteredTasks: tasks }),
})) 

File: ./packages/desktop/src/renderer/stores/task-filter-store.ts
import { create } from 'zustand'
import { addDays, subDays, subMonths, subYears, startOfDay } from 'date-fns'

type SortOrder = 'most-recent' | 'least-recent'
type DateRange = '7-days' | '14-days' | '30-days' | '3-months' | '1-year' | 'custom'

interface FilterState {
  status: 'all' | 'open' | 'completed'
  search: string
  sortOrder: SortOrder
  dateRange: DateRange
  customDateFrom: Date | null
  customDateTo: Date | null
  setStatus: (status: 'all' | 'open' | 'completed') => void
  setSearch: (search: string) => void
  setSortOrder: (order: SortOrder) => void
  setDateRange: (range: DateRange) => void
  setCustomDateRange: (from: Date | null, to: Date | null) => void
  getDateRangeLabel: () => string
  getDateRange: () => { from: Date; to: Date }
}

export const useFilterStore = create<FilterState>((set, get) => ({
  status: 'all',
  search: '',
  sortOrder: 'most-recent',
  dateRange: '7-days',
  customDateFrom: null,
  customDateTo: null,

  setStatus: (status) => set({ status }),
  setSearch: (search) => set({ search }),
  setSortOrder: (order) => set({ sortOrder: order }),
  setDateRange: (range) => set({ 
    dateRange: range,
    // Reset custom dates when switching to preset range
    ...(range !== 'custom' && {
      customDateFrom: null,
      customDateTo: null
    })
  }),
  setCustomDateRange: (from, to) => set({ 
    dateRange: 'custom',
    customDateFrom: from,
    customDateTo: to 
  }),

  getDateRangeLabel: () => {
    const { dateRange } = get()
    switch (dateRange) {
      case '7-days': return 'Last 7 days'
      case '14-days': return 'Last 14 days'
      case '30-days': return 'Last 30 days'
      case '3-months': return 'Last 3 months'
      case '1-year': return 'Last year'
      case 'custom': return 'Custom range'
    }
  },

  getDateRange: () => {
    const { dateRange, customDateFrom, customDateTo } = get()
    const today = startOfDay(new Date())
    const tomorrow = addDays(today, 1)

    if (dateRange === 'custom' && customDateFrom && customDateTo) {
      return { from: customDateFrom, to: customDateTo }
    }

    switch (dateRange) {
      case '7-days':
        return { from: subDays(tomorrow, 7), to: tomorrow }
      case '14-days':
        return { from: subDays(tomorrow, 14), to: tomorrow }
      case '30-days':
        return { from: subDays(tomorrow, 30), to: tomorrow }
      case '3-months':
        return { from: subMonths(tomorrow, 3), to: tomorrow }
      case '1-year':
        return { from: subYears(tomorrow, 1), to: tomorrow }
      default:
        return { from: subDays(tomorrow, 7), to: tomorrow }
    }
  }
})) 

File: ./packages/desktop/src/renderer/stores/task-ai-store.ts
import { create } from 'zustand'
import { createOpenAI } from '@ai-sdk/openai'
import { streamObject } from 'ai'
import { z } from 'zod'
import { Task } from '@/renderer/task-utils'
import { persist } from 'zustand/middleware'

export interface ActionableStep {
  id: string
  text: string
  fileModified: string
  fileCreated: string
  filePath: string
  taskContext: string
  tags: string[]
  obsidianUrl?: string
  llmAnalysis: {
    importance: string
    estimatedTime: string
    priority: 'high' | 'medium' | 'low'
    suggestedNextSteps: string[]
  }
}

interface TaskAIState {
  actionableSteps: ActionableStep[]
  isLoading: boolean
  error: Error | null
  selectedStepId: string | null
  autoRefresh: boolean
  analyzeRecentTasks: (tasks: Task[], apiKey: string) => Promise<void>
  selectStep: (stepId: string | null) => void
  setAutoRefresh: (enabled: boolean) => void
}

export const useTaskAIStore = create<TaskAIState>()(
  persist(
    (set, get) => ({
      actionableSteps: [],
      isLoading: false,
      error: null,
      selectedStepId: null,
      autoRefresh: true, // Default to auto-refresh enabled

      selectStep: (stepId) => set({ selectedStepId: stepId }),
      setAutoRefresh: (enabled) => set({ autoRefresh: enabled }),

      analyzeRecentTasks: async (tasks: Task[], apiKey: string) => {
        if (!tasks.length || !apiKey) return

        set({ isLoading: true })

        try {
          // Use the provided filtered tasks directly
          const recentTasks = tasks
            .filter((task) => !task.completed)
            .sort(
              (a, b) =>
                new Date(b.stats.modified).getTime() -
                new Date(a.stats.modified).getTime()
            )
            .slice(0, 25)
            .map(({ id, title, tags, context }) => ({ id, title, tags, context }))

          // Get files from filtered tasks
          const recentFiles = [...new Set(tasks.map(task => task.filePath))]

          const fileContexts = await Promise.all(
            recentFiles.map(async (filePath) => {
              try {
                const content = await window.api.readMarkdownFile(filePath)
                return {
                  path: filePath,
                  content: content.content,
                  modified: tasks.find(t => t.filePath === filePath)?.stats.modified
                }
              } catch (error) {
                console.error(`Failed to read file: ${filePath}`, error)
                return null
              }
            })
          )

          const validFileContexts = fileContexts.filter((f): f is NonNullable<typeof f> => f !== null)

          const openai = createOpenAI({ apiKey })
          const result = await streamObject({
            model: openai('gpt-4o'),
            schema: z.object({
              steps: z.array(
                z.object({
                  id: z.string(),
                  text: z.string(),
                  importance: z.string(),
                  estimatedTime: z.string(),
                  priority: z.enum(['high', 'medium', 'low']),
                  filePath: z.string(),
                  suggestedNextSteps: z.array(z.string())
                })
              ).max(5)
            }).strict(),
            system: `You are analyzing tasks and files from the last 30 days.
                    Current date: ${new Date().toISOString()}
                    
                    Your goal is to identify the 0-5 most important actionable steps.
                    For each step:
                    1. Use the actual file path where the task was found
                    2. Consider file recency and task priority
                    3. Focus on concrete, actionable items
                    4. Maintain connection to source context`,
            prompt: `Analyze these files and tasks to identify key actionable steps:

                    Recent Files with Context:
                    ${validFileContexts.map(file => `
                      File: ${file.path}
                      Modified: ${file.modified}
                      ---
                      ${file.content.slice(0, 500)}... // First 500 chars for context
                      ---
                    `).join('\n')}

                    Available Tasks:
                    ${JSON.stringify(recentTasks, null, 2)}

                    Return 0-5 most important actionable steps.
                    Each step must:
                    1. Reference a specific file path
                    2. Be concrete and actionable
                    3. Include clear importance justification
                    4. Estimate time required
                    5. Suggest specific next steps`,
          })

          // Process the stream
          for await (const chunk of result.partialObjectStream) {
            if (chunk.steps?.length) {
              set({
                actionableSteps: chunk.steps.map(step => ({
                  id: step.id,
                  text: step.text,
                  fileModified: validFileContexts.find(f => f.path === step.filePath)?.modified || new Date().toISOString(),
                  fileCreated: tasks.find(t => t.filePath === step.filePath)?.stats.created || new Date().toISOString(),
                  filePath: step.filePath,
                  taskContext: step.importance,
                  tags: tasks.find(t => t.filePath === step.filePath)?.tags || [],
                  obsidianUrl: tasks.find(t => t.filePath === step.filePath)?.obsidianUrl,
                  llmAnalysis: {
                    importance: step.importance,
                    estimatedTime: step.estimatedTime,
                    priority: step.priority,
                    suggestedNextSteps: step.suggestedNextSteps
                  }
                }))
              })
            }
          }
        } catch (error) {
          set({ error: error as Error })
        } finally {
          set({ isLoading: false })
        }
      }
    }),
    {
      name: 'task-ai-store',
      partialize: (state) => ({ autoRefresh: state.autoRefresh }),
    }
  )
) 

File: ./packages/desktop/src/renderer/stores/editor-store.ts
import { create } from 'zustand'
import type { MarkdownContent } from '@/renderer/types'

interface EditorState {
  activeFile: {
    path: string
    content: MarkdownContent
  } | null
  setActiveFile: (file: { path: string; content: MarkdownContent } | null) => void
  updateContent: (content: string) => void
  openFile: (path: string) => Promise<void>
}

export const useEditorStore = create<EditorState>((set, get) => ({
  activeFile: null,
  setActiveFile: (file) => set({ activeFile: file }),
  updateContent: (content) => 
    set((state) => ({
      activeFile: state.activeFile 
        ? {
            ...state.activeFile,
            content: { 
              content,
              frontMatter: state.activeFile.content.frontMatter 
            }
          }
        : null
    })),
  openFile: async (path: string) => {
    try {
      const content = await window.api.readMarkdownFile(path)
      set({ 
        activeFile: {
          path,
          content: {
            content: content.content,
            frontMatter: content.frontMatter || {}
          }
        }
      })
    } catch (error) {
      console.error('Failed to open file:', error)
    }
  }
})) 

File: ./packages/desktop/src/renderer/types.ts
export interface VaultConfig {
  path: string;
  isObsidian: boolean;
  lastOpened: string;
  showEditor: boolean;
}

export interface FileInfo {
  name: string;
  isDirectory: boolean;
  path: string;
}

export interface MarkdownContent {
  frontMatter: any;
  content: string;
} 

File: ./packages/desktop/src/renderer/components/markdown-editor.tsx
import React, { useState, useEffect } from 'react'
import type { MarkdownContent } from '@/renderer/types'
import { useEditor, EditorContent } from '@tiptap/react'
import StarterKit from '@tiptap/starter-kit'
import CharacterCount from '@tiptap/extension-character-count'
import Highlight from '@tiptap/extension-highlight'
import CodeBlockLowlight from '@tiptap/extension-code-block-lowlight'
import Placeholder from '@tiptap/extension-placeholder'
import TaskList from '@tiptap/extension-task-list'
import TaskItem from '@tiptap/extension-task-item'
import Link from '@tiptap/extension-link'
import { Markdown } from 'tiptap-markdown'
import { useEditorStore } from '@/renderer/stores/editor-store'

interface MarkdownEditorProps {
  onSave?: (content: string) => void
}

export function MarkdownEditor({ onSave }: MarkdownEditorProps) {
  const [isSaving, setIsSaving] = useState(false)
  const { activeFile, updateContent } = useEditorStore()

  const editor = useEditor({
    editorProps: {
      attributes: {
        class: 'prose prose-sm dark:prose-invert max-w-none focus-visible:outline-none h-full min-h-[400px] text-foreground',
      },
    },
    extensions: [
      StarterKit.configure({
        heading: {
          levels: [1, 2, 3, 4, 5, 6],
        },
        codeBlock: false,
      }),
      Highlight,
      CharacterCount.configure({
        limit: 20000,
      }),
      TaskList.configure({
        HTMLAttributes: {
          class: 'not-prose pl-2',
        },
      }),
      TaskItem.configure({
        nested: true,
        HTMLAttributes: {
          class: 'flex items-start gap-2 my-0.5',
        },
      }),
      Link.configure({
        openOnClick: false,
        HTMLAttributes: {
          class: 'text-primary hover:underline cursor-pointer',
        },
      }),
      Markdown.configure({
        html: false,
        breaks: true,
        transformPastedText: true,
      }),
      Placeholder.configure({
        placeholder: 'Start writing...',
      }),
    ],
    content: activeFile?.content.content || '',
    onUpdate: ({ editor }) => {
      setIsSaving(true)
      const markdown = editor.storage.markdown.getMarkdown()
      updateContent(markdown)
      if (onSave) {
        onSave(markdown)
      }
      setIsSaving(false)
    },
  })

  useEffect(() => {
    if (activeFile && editor) {
      editor.commands.setContent(activeFile.content.content, false, {
        preserveWhitespace: true,
      })
    }
  }, [activeFile, editor])

  if (!activeFile) {
    return (
      <div className="h-full flex items-center justify-center text-muted-foreground">
        Select a markdown file to edit
      </div>
    )
  }

  const fileName = activeFile.path.split('/').pop()?.replace('.md', '')

  return (
    <div className="h-full flex flex-col">
      <div className="flex-none p-4 border-b">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-2">
            <h2 className="text-lg font-semibold">{fileName}</h2>
            {isSaving && (
              <span className="text-sm text-muted-foreground">Saving...</span>
            )}
          </div>
        </div>
      </div>
      <div className="flex-1 overflow-hidden">
        <div className="h-full overflow-auto p-4">
          <style>{`
            .ProseMirror {
              height: 100%;
              min-height: 100%;
              > * + * {
                margin-top: 0.75em;
              }
              
              ul[data-type="taskList"] {
                list-style: none;
                padding: 0;
                
                li {
                  display: flex;
                  align-items: flex-start;
                  gap: 0.5rem;
                  margin: 0;
                  padding: 0.2rem 0;
                  
                  > label {
                    margin: 0;
                    user-select: none;
                  }
                  
                  > div {
                    margin: 0;
                    flex: 1;
                    > p {
                      display: inline;
                      margin: 0;
                    }
                  }
                }
              }
            }
          `}</style>
          <EditorContent editor={editor} className="h-full" />
        </div>
      </div>
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/ui/tabs.tsx
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent } 

File: ./packages/desktop/src/renderer/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


File: ./packages/desktop/src/renderer/components/ui/scroll-area.tsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar } 

File: ./packages/desktop/src/renderer/components/ui/resizable.tsx
import React, { useState, useEffect, useCallback } from 'react'
import { cn } from '@/lib/utils'

interface ResizableProps {
  children: React.ReactNode
  defaultWidth?: number
  minWidth?: number
  maxWidth?: number
  className?: string
}

export function Resizable({
  children,
  defaultWidth = 400,
  minWidth = 300,
  maxWidth = 800,
  className
}: ResizableProps) {
  const [width, setWidth] = useState(defaultWidth)
  const [isResizing, setIsResizing] = useState(false)

  const startResizing = useCallback((e: React.MouseEvent) => {
    e.preventDefault()
    setIsResizing(true)
  }, [])

  const stopResizing = useCallback(() => {
    setIsResizing(false)
  }, [])

  const resize = useCallback((e: MouseEvent) => {
    if (isResizing) {
      const newWidth = window.innerWidth - e.clientX
      if (newWidth >= minWidth && newWidth <= maxWidth) {
        setWidth(newWidth)
      }
    }
  }, [isResizing, minWidth, maxWidth])

  useEffect(() => {
    if (isResizing) {
      window.addEventListener('mousemove', resize)
      window.addEventListener('mouseup', stopResizing)
    }

    return () => {
      window.removeEventListener('mousemove', resize)
      window.removeEventListener('mouseup', stopResizing)
    }
  }, [isResizing, resize, stopResizing])

  return (
    <div 
      className={cn("relative", className)}
      style={{ width: `${width}px` }}
    >
      <div
        className={cn(
          "absolute left-0 top-0 h-full w-1 cursor-ew-resize select-none",
          "hover:bg-blue-500/20 transition-colors",
          isResizing && "bg-blue-500/40"
        )}
        onMouseDown={startResizing}
      />
      {children}
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/ui/dialog.tsx
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
} 

File: ./packages/desktop/src/renderer/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants } 

File: ./packages/desktop/src/renderer/components/ui/dropdown-menu.tsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


File: ./packages/desktop/src/renderer/components/ui/input.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors",
          "file:border-0 file:bg-transparent file:text-sm file:font-medium",
          "placeholder:text-muted-foreground",
          "focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring",
          "disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input } 

File: ./packages/desktop/src/renderer/components/ui/context-menu.tsx
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


File: ./packages/desktop/src/renderer/components/task-dashboard.tsx
'use client';

import { useState, useEffect, useMemo } from 'react';
import { Button } from '@/renderer/components/ui/button';
import { cn } from '@/lib/utils';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/renderer/components/ui/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/renderer/components/ui/tabs';
import { ScrollArea } from '@/renderer/components/ui/scroll-area';
import {
  AlertCircle,
  Book,
  CheckCircle2,
  FileText,
  List,
  Plus,
  Search,
  Tag,
} from 'lucide-react';
import { streamObject } from 'ai';
import { z } from 'zod';
import { useApiKeyStore } from '@/stores/api-key-store';
import { createOpenAI } from '@ai-sdk/openai';
import { TaskSummary } from './task-summary';
import { getAllTasks } from '@/renderer/task-utils';
import type { Task } from '@/renderer/task-utils';
import { ApiKeyRequirement } from './api-key-requirement';
import { Loader2 } from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectItem,
  SelectContent,
} from '@/components/ui/select';
import { useDebounce } from 'use-debounce';

interface TaskFilters {
  status: 'all' | 'open' | 'completed';
  priority: 'all' | 'high' | 'medium' | 'low';
  search: string;
}

export function TaskDashboard({ vaultPath }: { vaultPath: string }) {
  const [activeTab, setActiveTab] = useState('overview');
  const [tasks, setTasks] = useState<Task[]>([]);
  const [selectedTasks, setSelectedTasks] = useState<string[]>([]);
  const [filters, setFilters] = useState<TaskFilters>({
    status: 'all',
    priority: 'all',
    search: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Debounce search input
  const [debouncedSearch] = useDebounce(filters.search, 300);

  // Filter tasks based on current filters
  const filteredTasks = useMemo(() => {
    return tasks.filter((task) => {
      const matchesStatus =
        filters.status === 'all'
          ? true
          : filters.status === 'completed'
          ? task.completed
          : !task.completed;

      const matchesSearch =
        task.title.toLowerCase().includes(debouncedSearch.toLowerCase()) ||
        task.tags.some((tag) =>
          tag.toLowerCase().includes(debouncedSearch.toLowerCase())
        );

      return matchesStatus && matchesSearch;
    });
  }, [tasks, filters.status, debouncedSearch]);

  // Load tasks with error handling
  useEffect(() => {
    const loadTasks = async () => {
      if (!vaultPath) return;
      setIsLoading(true);
      setError(null);

      try {
        const allTasks = await getAllTasks(vaultPath);
        setTasks(allTasks);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load tasks');
      } finally {
        setIsLoading(false);
      }
    };

    loadTasks();
  }, [vaultPath]);

  const handleTaskToggle = async (taskId: string) => {
    try {
      const task = tasks.find((t) => t.id === taskId);
      if (!task) return;

      const content = await window.api.readMarkdownFile(task.filePath);
      const updatedContent = content.content.replace(
        /- \[([ xX])\] (.*)/g,
        (match: string, check: string, text: string) => {
          if (text.includes(task.title)) {
            return `- [${check === ' ' ? 'x' : ' '}] ${text}`;
          }
          return match;
        }
      );

      await window.api.writeMarkdownFile(task.filePath, updatedContent);
      setTasks(
        tasks.map((t) =>
          t.id === taskId ? { ...t, completed: !t.completed } : t
        )
      );
    } catch (err) {
      setError('Failed to update task. Please try again.');
    }
  };

  const handleBulkAction = async (completed: boolean) => {
    const tasksToUpdate =
      selectedTasks.length > 0 ? selectedTasks : filteredTasks.map((t) => t.id);

    try {
      await Promise.all(
        tasksToUpdate.map((taskId) => handleTaskToggle(taskId))
      );
      setSelectedTasks([]);
    } catch (err) {
      setError('Failed to update multiple tasks. Please try again.');
    }
  };

  const { apiKey } = useApiKeyStore();

  if (!apiKey) {
    return <ApiKeyRequirement />;
  }

  // Loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading tasks...</span>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="p-4 bg-destructive/15 text-destructive rounded-lg">
        <AlertCircle className="h-5 w-5 inline mr-2" />
        {error}
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col w-full">
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <div className="flex justify-between items-center mb-4">
  

          <div className="flex items-center gap-2">
            <Select>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="open">Open</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <ScrollArea className="flex-1">
          <TabsContent value="overview" className="m-0">
            <TaskSummary vaultPath={vaultPath} />
          </TabsContent>
        </ScrollArea>
      </Tabs>
    </div>
  );
}


File: ./packages/desktop/src/renderer/components/api-key-requirement.tsx
import React, { useState } from 'react';
import { Key } from 'lucide-react';
import { Button } from '@/renderer/components/ui/button';
import { useApiKeyStore } from '@/stores/api-key-store';

export function ApiKeyRequirement() {
  const { setApiKey } = useApiKeyStore();
  const [tempApiKey, setTempApiKey] = useState('');

  const handleSaveApiKey = () => {
    if (!tempApiKey.trim()) return;
    setApiKey(tempApiKey);
    setTempApiKey('');
  };

  return (
    <div className="flex flex-col h-full bg-white border-l border-gray-200">
      <div className="flex-1 flex items-center justify-center">
        <div className="w-full max-w-md p-8">
          <div className="text-center mb-6">
            <Key className="w-12 h-12 mx-auto mb-4 text-blue-600" />
            <h2 className="text-2xl font-semibold mb-2">
              OpenAI API Key Required
            </h2>
            <p className="text-gray-600">
              Please enter your OpenAI API key to continue
            </p>
          </div>
          <div className="space-y-4">
            <input
              type="password"
              value={tempApiKey}
              onChange={(e) => setTempApiKey(e.target.value)}
              placeholder="sk-..."
              className="w-full px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <Button
              onClick={handleSaveApiKey}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white"
              disabled={!tempApiKey.trim()}
            >
              Save API Key
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
} 

File: ./packages/desktop/src/renderer/components/obsidian-icon.tsx
import { cn } from '@/lib/utils';

export const ObsidianIcon = ({
  className,
  onClick,
}: {
  className?: string;
  onClick?: (e: React.MouseEvent<SVGSVGElement>) => void;
}) => (
  <svg
    id="custom-logo"
    className={cn('transition-colors duration-200', className)}
    width="512"
    onClick={onClick}
    height="512"
    viewBox="0 0 512 512"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    style={{ height: '36px', width: '36px' }}
  >
    <defs>
      <radialGradient
        id="b"
        cx="0"
        cy="0"
        r="1"
        gradientUnits="userSpaceOnUse"
        gradientTransform="matrix(-48 -185 123 -32 179 429.7)"
      >
        <stop stopColor="#fff" stopOpacity=".4" />
        <stop offset="1" stopOpacity=".1" />
      </radialGradient>
      <radialGradient
        id="c"
        cx="0"
        cy="0"
        r="1"
        gradientUnits="userSpaceOnUse"
        gradientTransform="matrix(41 -310 229 30 341.6 351.3)"
      >
        <stop stopColor="#fff" stopOpacity=".6" />
        <stop offset="1" stopColor="#fff" stopOpacity=".1" />
      </radialGradient>
      <radialGradient
        id="d"
        cx="0"
        cy="0"
        r="1"
        gradientUnits="userSpaceOnUse"
        gradientTransform="matrix(57 -261 178 39 190.5 296.3)"
      >
        <stop stopColor="#fff" stopOpacity=".8" />
        <stop offset="1" stopColor="#fff" stopOpacity=".4" />
      </radialGradient>
      <radialGradient
        id="e"
        cx="0"
        cy="0"
        r="1"
        gradientUnits="userSpaceOnUse"
        gradientTransform="matrix(-79 -133 153 -90 321.4 464.2)"
      >
        <stop stopColor="#fff" stopOpacity=".3" />
        <stop offset="1" stopOpacity=".3" />
      </radialGradient>
      <radialGradient
        id="f"
        cx="0"
        cy="0"
        r="1"
        gradientUnits="userSpaceOnUse"
        gradientTransform="matrix(-29 136 -92 -20 300.7 149.9)"
      >
        <stop stopColor="#fff" stopOpacity="0" />
        <stop offset="1" stopColor="#fff" stopOpacity=".2" />
      </radialGradient>
      <radialGradient
        id="g"
        cx="0"
        cy="0"
        r="1"
        gradientUnits="userSpaceOnUse"
        gradientTransform="matrix(72 73 -155 153 137.8 225.2)"
      >
        <stop stopColor="#fff" stopOpacity=".2" />
        <stop offset="1" stopColor="#fff" stopOpacity=".4" />
      </radialGradient>
      <radialGradient
        id="h"
        cx="0"
        cy="0"
        r="1"
        gradientUnits="userSpaceOnUse"
        gradientTransform="matrix(20 118 -251 43 215.1 273.7)"
      >
        <stop stopColor="#fff" stopOpacity=".1" />
        <stop offset="1" stopColor="#fff" stopOpacity=".3" />
      </radialGradient>
      <radialGradient
        id="i"
        cx="0"
        cy="0"
        r="1"
        gradientUnits="userSpaceOnUse"
        gradientTransform="matrix(-162 -85 268 -510 374.4 371.7)"
      >
        <stop stopColor="#fff" stopOpacity=".2" />
        <stop offset=".5" stopColor="#fff" stopOpacity=".2" />
        <stop offset="1" stopColor="#fff" stopOpacity=".3" />
      </radialGradient>
      <filter
        id="a"
        x="80.1"
        y="37"
        width="351.1"
        height="443.2"
        filterUnits="userSpaceOnUse"
        colorInterpolationFilters="sRGB"
      >
        <feFlood floodOpacity="0" result="BackgroundImageFix" />
        <feBlend in="SourceGraphic" in2="BackgroundImageFix" result="shape" />
        <feGaussianBlur
          stdDeviation="6.5"
          result="effect1_foregroundBlur_744_9191"
        />
      </filter>
    </defs>
    <rect
      id="logo-bg"
      className="transition-colors duration-200"
      fill="currentColor"
      fillOpacity="0.1"
      width="512"
      height="512"
      rx="100"
    />
    <g filter="url(#a)">
      <path
        d="M359.2 437.5c-2.6 19-21.3 33.9-40 28.7-26.5-7.2-57.2-18.6-84.8-20.7l-42.4-3.2a28 28 0 0 1-18-8.3l-73-74.8a27.7 27.7 0 0 1-5.4-30.7s45-98.6 46.8-103.7c1.6-5.1 7.8-49.9 11.4-73.9a28 28 0 0 1 9-16.5L249 57.2a28 28 0 0 1 40.6 3.4l72.6 91.6a29.5 29.5 0 0 1 6.2 18.3c0 17.3 1.5 53 11.2 76a301.3 301.3 0 0 0 35.6 58.2 14 14 0 0 1 1 15.6c-6.3 10.7-18.9 31.3-36.6 57.6a142.2 142.2 0 0 0-20.5 59.6Z"
        fill="currentColor"
        fillOpacity=".2"
      />
    </g>
    <path
      id="arrow"
      d="M359.9 434.3c-2.6 19.1-21.3 34-40 28.9-26.4-7.3-57-18.7-84.7-20.8l-42.3-3.2a27.9 27.9 0 0 1-18-8.4l-73-75a27.9 27.9 0 0 1-5.4-31s45.1-99 46.8-104.2c1.7-5.1 7.8-50 11.4-74.2a28 28 0 0 1 9-16.6l86.2-77.5a28 28 0 0 1 40.6 3.5l72.5 92a29.7 29.7 0 0 1 6.2 18.3c0 17.4 1.5 53.2 11.1 76.3a303 303 0 0 0 35.6 58.5 14 14 0 0 1 1.1 15.7c-6.4 10.8-18.9 31.4-36.7 57.9a143.3 143.3 0 0 0-20.4 59.8Z"
      fill="currentColor"
    />
    <path
      d="M182.7 436.4c33.9-68.7 33-118 18.5-153-13.2-32.4-37.9-52.8-57.3-65.5-.4 1.9-1 3.7-1.8 5.4L96.5 324.8a27.9 27.9 0 0 0 5.5 31l72.9 75c2.3 2.3 5 4.2 7.8 5.6Z"
      fill="url(#b)"
    />
    <path
      d="M274.9 297c9.1.9 18 2.9 26.8 6.1 27.8 10.4 53.1 33.8 74 78.9 1.5-2.6 3-5.1 4.6-7.5a1222 1222 0 0 0 36.7-57.9 14 14 0 0 0-1-15.7 303 303 0 0 1-35.7-58.5c-9.6-23-11-58.9-11.1-76.3 0-6.6-2.1-13.1-6.2-18.3l-72.5-92-1.2-1.5c5.3 17.5 5 31.5 1.7 44.2-3 11.8-8.6 22.5-14.5 33.8-2 3.8-4 7.7-5.9 11.7a140 140 0 0 0-15.8 58c-1 24.2 3.9 54.5 20 95Z"
      fill="url(#c)"
    />
    <path
      d="M274.8 297c-16.1-40.5-21-70.8-20-95 1-24 8-42 15.8-58l6-11.7c5.8-11.3 11.3-22 14.4-33.8a78.5 78.5 0 0 0-1.7-44.2 28 28 0 0 0-39.4-2l-86.2 77.5a28 28 0 0 0-9 16.6L144.2 216c0 .7-.2 1.3-.3 2 19.4 12.6 44 33 57.3 65.3 2.6 6.4 4.8 13.1 6.4 20.4a200 200 0 0 1 67.2-6.8Z"
      fill="url(#d)"
    />
    <path
      d="M320 463.2c18.6 5.1 37.3-9.8 39.9-29a153 153 0 0 1 15.9-52.2c-21-45.1-46.3-68.5-74-78.9-29.5-11-61.6-7.3-94.2.6 7.3 33.1 3 76.4-24.8 132.7 3.1 1.6 6.6 2.5 10.1 2.8l43.9 3.3c23.8 1.7 59.3 14 83.2 20.7Z"
      fill="url(#e)"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M255 200.5c-1.1 24 1.9 51.4 18 91.8l-5-.5c-14.5-42.1-17.7-63.7-16.6-88 1-24.3 8.9-43 16.7-59 2-4 6.6-11.5 8.6-15.3 5.8-11.3 9.7-17.2 13-27.5 4.8-14.4 3.8-21.2 3.2-28 3.7 24.5-10.4 45.8-21 67.5a145 145 0 0 0-17 59Z"
      fill="url(#f)"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M206 285.1c2 4.4 3.7 8 4.9 13.5l-4.3 1c-1.7-6.4-3-11-5.5-16.5-14.6-34.3-38-52-57-65 23 12.4 46.7 31.9 61.9 67Z"
      fill="url(#g)"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M211.1 303c8 37.5-1 85.2-27.5 131.6 22.2-46 33-90.1 24-131l3.5-.7Z"
      fill="url(#h)"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M302.7 299.5c43.5 16.3 60.3 52 72.8 81.9-15.5-31.2-37-65.7-74.4-78.5-28.4-9.8-52.4-8.6-93.5.7l-.9-4c43.6-10 66.4-11.2 96 0Z"
      fill="url(#i)"
    />
  </svg>
);


File: ./packages/desktop/src/renderer/components/model-selector.tsx
import { ChevronDown } from 'lucide-react'
import { Button } from '@/renderer/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/renderer/components/ui/dropdown-menu'
import { useModelStore, ModelType } from '@/stores/model-store'

const MODEL_OPTIONS: { value: ModelType; label: string }[] = [
  { value: 'gpt-4o', label: 'gpt-4o' },
  { value: 'o1-preview', label: 'o1' },
]

export function ModelSelector() {
  const { selectedModel, setSelectedModel } = useModelStore()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="outline" 
          size="sm"
          className="h-8 gap-1 bg-white border-gray-200"
        >
          {MODEL_OPTIONS.find(m => m.value === selectedModel)?.label}
          <ChevronDown className="h-4 w-4 opacity-50" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="start">
        {MODEL_OPTIONS.map((option) => (
          <DropdownMenuItem
            key={option.value}
            onClick={() => setSelectedModel(option.value)}
          >
            {option.label}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
} 

File: ./packages/desktop/src/renderer/components/chat-view.tsx
import React, { useRef, useState, useEffect, useCallback } from 'react';
import {
  Send,
  ListTodo,
  GitFork,
  ClipboardList,
  Key,
  Clock,
  MessageSquarePlus,
  Trash2,
} from 'lucide-react';
import { Button } from '@/renderer/components/ui/button';
import { ScrollArea } from '@/renderer/components/ui/scroll-area';
import { motion, AnimatePresence } from 'framer-motion';
import ReactMarkdown from 'react-markdown';
import type { MarkdownContent } from '@/renderer/types';
import { useChat } from 'ai/react';
import { createOpenAI } from '@ai-sdk/openai';
import { CoreTool, streamText } from 'ai';
import { useApiKeyStore } from '@/stores/api-key-store';
import { useModelStore } from '@/stores/model-store';
import { ModelSelector } from '@/renderer/components/model-selector';
import { Resizable } from '@/renderer/components/ui/resizable';

import { z } from 'zod';
import { ApiKeyRequirement } from './api-key-requirement';

export const tools = {
  add_task: {
    description:
      "Creates a new task file in the user's vault with Obsidian-compatible task formatting using the content of the current file",
    parameters: z.object({
      name: z.string().describe('The name/title of the task'),
      description: z
        .string()
        .describe('The task description and subtasks in markdown format'),
    }),
    execute: async (
      { name, description }: { name: string; description: string },
      vaultPath: string
    ) => {
      console.log(
        'Executing add_task tool with name:',
        name,
        'and description:',
        description
      );
      const sanitizedName = name.replace(/[^a-z0-9]/gi, '-').toLowerCase();
      const timestamp = new Date().toISOString();
      const dateFormatted = new Date().toISOString().split('T')[0];
      // print all the variables
      console.log('Date formatted:', dateFormatted);
      console.log('Timestamp:', timestamp);
      console.log('Sanitized name:', sanitizedName, 'vaultPath:', vaultPath);

      // Create markdown content with frontmatter and task formatting
      const content = `---
type: task
created: ${timestamp}
status: active
due: ${dateFormatted}
tags: [task]
---

# ${name}

## Status
- [ ] Completed

## Description
${description}

## Progress
- [ ] Started
- [ ] In Progress
- [ ] Ready for Review
- [ ] Done

## Related
- Backlinks: [[Tasks]]
`;

      console.log('Content:', content);
      // Create file in Tasks directory
      await window.api.writeMarkdownToVault(`${sanitizedName}.md`, content)
      return {
        success: true,
        path: `${sanitizedName}.md`,
        message: `Created task: ${name}`,
      };
    },
  },
};

// Separate component for the chat interface
function ChatInterface({
  currentFile,
  apiKey,
}: {
  currentFile: ChatViewProps['currentFile'];
  apiKey: string;
}) {
  const lastMessageRef = useRef<HTMLDivElement>(null);
  const { selectedModel } = useModelStore();

  const { messages, input, setInput, handleSubmit, isLoading, setMessages } =
    useChat({
      api: '/api/chat',
      body: {
        context: currentFile,
      },

      fetch: async (url, options) => {
        const { messages, context } = JSON.parse(options?.body as string);
        const openai = createOpenAI({
          apiKey,
        });

        const getSystemPrompt = (context: ChatViewProps['currentFile']) => {
          if (!context)
            return `You are a helpful AI assistant. You can help create and manage tasks.
            When a user wants to create a task, use the add_task function.`;
          return `You are a helpful AI assistant. You are looking at the file ${
            context.path
          }. 
          Here is the content of the file:
          ${JSON.stringify(context.content)}
          
          You can help create and manage tasks. When a user wants to create a task, use the add_task function.`;
        };
        const result = await streamText({
          model: openai(selectedModel),
          system: getSystemPrompt(context),
          messages,
          tools: tools as unknown as Record<string, CoreTool<any, any>>,
        });
        return result.toDataStreamResponse();
      },
      onFinish: (message) => {
        if (lastMessageRef.current) {
          lastMessageRef.current.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
          });
        }
      },
    });

  const handleCreateSubtasks = () => {
    setInput(
      'Please break down the content into a detailed list of subtasks. Format it as a numbered list with clear, actionable items.'
    );
    handleSubmit(new Event('submit'));
  };

  const handleCreateTask = () => {
    setInput(
      'Please create a new task based on the content. Include a clear title and description.'
    );
    handleSubmit(new Event('submit'));
  };

  const handleRetrieveTasks = () => {
    setInput('Please show me the current list of tasks and subtasks.');
    handleSubmit(new Event('submit'));
  };

  const handleClearConversation = () => {
    setMessages([]);
  };

  return (
    <div className="flex flex-col h-full bg-white border-l border-gray-200">
      <div className="p-2 border-b border-gray-200 bg-gray-50 flex justify-between">
        <p className="text-sm text-gray-600">
          {currentFile ? `ðŸ“„ ${currentFile.path}` : 'No file selected'}
        </p>
        <Button
          onClick={handleClearConversation}
          variant="outline"
          disabled={isLoading}
          className="bg-white hover:bg-gray-50 text-gray-700 border-gray-200"
        >
          <Trash2 className="w-4 h-4 mr-2 text-red-600" />
          Clear Chat
        </Button>
      </div>

      <ScrollArea className="flex-grow p-4">
        <AnimatePresence>
          {messages.map((m, index) => (
            <motion.div
              key={m.id}
              ref={index === messages.length - 1 ? lastMessageRef : null}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className={`flex ${
                m.role === 'user' ? 'justify-end' : 'justify-start'
              } mb-4`}
            >
              <div
                className={`max-w-[70%] ${
                  m.role === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-900'
                } rounded-lg p-3 shadow-sm`}
              >
                {m.role === 'user' ? (
                  <p className="text-sm">{m.content}</p>
                ) : (
                  <ReactMarkdown className="text-sm prose prose-slate max-w-none">
                    {m.content}
                  </ReactMarkdown>
                )}
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
      </ScrollArea>

      <div className="p-4 border-t border-gray-200 bg-gray-50">
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center gap-2">
            <div className="flex gap-2 ml-4">
              <Button
                onClick={handleCreateSubtasks}
                variant="outline"
                disabled={isLoading}
                className="bg-white hover:bg-gray-50 text-gray-700 border-gray-200"
              >
                <ListTodo className="w-4 h-4 mr-2 text-emerald-600" />
                Create Subtasks
              </Button>
              <Button
                onClick={handleCreateTask}
                variant="outline"
                disabled={isLoading}
                className="bg-white hover:bg-gray-50 text-gray-700 border-gray-200"
              >
                <GitFork className="w-4 h-4 mr-2 text-violet-600" />
                Create Task
              </Button>
              <Button
                onClick={handleRetrieveTasks}
                variant="outline"
                disabled={isLoading}
                className="bg-white hover:bg-gray-50 text-gray-700 border-gray-200"
              >
                <ClipboardList className="w-4 h-4 mr-2 text-blue-600" />
                Show Tasks
              </Button>
            </div>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="relative">
          <textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type a message..."
            disabled={isLoading}
            className="w-full bg-white border border-gray-200 text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-transparent min-h-[60px] max-h-[200px] resize-none pl-5 py-4 pr-16 rounded-lg disabled:opacity-50"
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit(new Event('submit'));
              }
            }}
          />
          <Button
            type="submit"
            size="icon"
            disabled={isLoading}
            className="absolute right-2 top-1/2 -translate-y-1/2 bg-blue-600 hover:bg-blue-700 text-white h-[45px] aspect-square disabled:opacity-50"
          >
            <Send className="h-5 w-5" />
          </Button>
        </form>
        {/* <ModelSelector /> */}
      </div>
    </div>
  );
}

interface ChatViewProps {
  currentFile: {
    path: string;
    content: MarkdownContent;
  } | null;
}

export function ChatView({ currentFile }: ChatViewProps) {
  const { apiKey } = useApiKeyStore();

  if (!apiKey) {
    return <ApiKeyRequirement />;
  }

  return (
    <Resizable
      defaultWidth={700}
      minWidth={600}
      maxWidth={1000}
      className="h-full"
    >
      <ChatInterface currentFile={currentFile} apiKey={apiKey} />
    </Resizable>
  );
}


File: ./packages/desktop/src/renderer/components/layout/resizable-pane.tsx
import { PanelResizeHandle } from 'react-resizable-panels';
import { cn } from '@/lib/utils';
import { GripVertical } from 'lucide-react';

export function ResizeHandle({ className = '', id }: { className?: string, id?: string }) {
  return (
    <PanelResizeHandle
      id={id}
      className={cn(
        'group relative flex w-2 flex-col items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-2 data-[panel-group-direction=vertical]:w-full',
        className
      )}
    >
      <GripVertical className="h-4 w-4 text-muted-foreground/50 transition group-hover:text-muted-foreground" />
    </PanelResizeHandle>
  );
} 

File: ./packages/desktop/src/renderer/components/layout/collapsible-pane.tsx
import { Button } from '@/components/ui/button';
import { Panel } from 'react-resizable-panels';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { cn } from '@/lib/utils';

interface CollapsiblePaneProps {
  children: React.ReactNode;
  defaultSize?: number;
  minSize?: number;
  maxSize?: number;
  isCollapsed?: boolean;
  onCollapse?: () => void;
  side?: 'left' | 'right';
  className?: string;
}

export function CollapsiblePane({
  children,
  defaultSize = 20,
  minSize = 10,
  maxSize = 40,
  isCollapsed = false,
  onCollapse,
  side = 'left',
  className,
}: CollapsiblePaneProps) {
  return (
    <Panel
      defaultSize={defaultSize}
      minSize={minSize}
      maxSize={maxSize}
      className={cn('relative', className)}
      style={{ display: isCollapsed ? 'none' : undefined }}
    >
      <Button
        variant="ghost"
        size="icon"
        className={cn(
          'absolute top-2 z-10 h-6 w-6',
          side === 'left' ? '-right-3' : '-left-3'
        )}
        onClick={onCollapse}
      >
        {side === 'left' ? (
          <ChevronLeft className="h-4 w-4" />
        ) : (
          <ChevronRight className="h-4 w-4" />
        )}
      </Button>
      {children}
    </Panel>
  );
} 

File: ./packages/desktop/src/renderer/components/task-summary.tsx
'use client';

import { useEffect } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/renderer/components/ui/card';
import { Loader2, ArrowUpDown } from 'lucide-react';
import { useTaskStore } from '@/renderer/stores/task-store';
import { useFilterStore } from '@/renderer/stores/task-filter-store';
import { TaskList } from './task-list/task-list';
import { TaskFilters } from './task-filters';
import { TaskAI } from './task-ai/task-ai';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

interface SummaryProps {
  vaultPath: string;
}

export function TaskSummary({ vaultPath }: SummaryProps) {
  const { tasks, loadTasks, isLoading, filteredTasks } = useTaskStore();
  const { getDateRangeLabel, sortOrder, setSortOrder } = useFilterStore();

  useEffect(() => {
    if (!vaultPath) return;
    loadTasks(vaultPath);
  }, [vaultPath, loadTasks]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-4">
        <Loader2 className="h-6 w-6 animate-spin mr-2" />
        <span>Loading tasks...</span>
      </div>
    );
  }

  // Calculate stats based on filtered tasks instead of all tasks
  const openTasksCount = filteredTasks.filter((task) => !task.completed).length;
  const completedTasksCount = filteredTasks.filter((task) => task.completed).length;

  return (
    <div className="space-y-4 h-full p-4">
      {/* Filtering Section */}
      <Card>
        <CardHeader className="pb-2">
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>Filter Tasks</CardTitle>
              <CardDescription>
                {getDateRangeLabel()} â€¢ {filteredTasks.length} tasks
              </CardDescription>
            </div>
            <TaskFilters />
          </div>
        </CardHeader>
      </Card>

      {/* Stats Row */}
      <div className="grid grid-cols-2 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="text-3xl font-bold">
              {openTasksCount}
            </div>
            <div className="text-sm text-muted-foreground">Open Tasks</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-3xl font-bold">
              {completedTasksCount}
            </div>
            <div className="text-sm text-muted-foreground">Completed</div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Row */}
      <div className="grid grid-cols-3 gap-4">
        {/* Task List - Takes up 2 columns */}
        <div className="col-span-2">
          <Card className="h-full">
            <CardHeader className="pb-2">
              <div className="flex justify-between items-center">
                <div>
                  <CardTitle>All Tasks</CardTitle>
                  <CardDescription>Showing {filteredTasks.length} tasks</CardDescription>
                </div>
                <Select
                  value={sortOrder}
                  onValueChange={(value: 'most-recent' | 'least-recent') => setSortOrder(value)}
                >
                  <SelectTrigger className="w-[160px]">
                    <div className="flex items-center gap-2">
                      <ArrowUpDown className="h-4 w-4" />
                      <SelectValue placeholder="Sort by created date" />
                    </div>
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="most-recent">Newest Created</SelectItem>
                    <SelectItem value="least-recent">Oldest Created</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardHeader>
            <CardContent className="p-0 pt-3">
              <TaskList />
            </CardContent>
          </Card>
        </div>

        {/* AI Insights Column */}
        <div className="col-span-1">
          <TaskAI />
        </div>
      </div>
    </div>
  );
}


File: ./packages/desktop/src/renderer/components/task-list/task-item.tsx
import { cn } from '@/lib/utils'
import { Task } from '@/renderer/task-utils'
import { ObsidianIcon } from '@/renderer/components/obsidian-icon'
import { useEditorStore } from '@/renderer/stores/editor-store'

interface TaskItemProps {
  task: Task
  onToggle: (taskId: string) => void
}

export function TaskItem({ task, onToggle }: TaskItemProps) {
  const { openFile } = useEditorStore()

  const handleClick = async (event: React.MouseEvent) => {
    event.stopPropagation()
    if (task.filePath) {
      await openFile(task.filePath)
    }
  }

  return (
    <div
      className={cn(
        'flex items-center justify-between py-2 border-b last:border-b-0',
        'cursor-pointer hover:bg-secondary/20 px-2 py-1 rounded'
      )}
      onClick={handleClick}
    >
      <div className="flex items-center gap-2 flex-1">
        <div
          className={cn(
            'h-4 w-4 rounded border cursor-pointer',
            task.completed && 'bg-primary border-primary'
          )}
          onClick={(e) => {
            e.stopPropagation()
            onToggle(task.id)
          }}
        />
        <span
          className={cn(
            task.completed && 'line-through text-muted-foreground'
          )}
        >
          {task.title}
        </span>
      </div>
      
      <div className="flex items-center gap-2">
        <div className="flex gap-1">
          {task.tags.map((tag) => (
            <span
              key={tag}
              className="text-xs px-2 py-1 bg-secondary rounded-full"
            >
              {tag}
            </span>
          ))}
        </div>
        {task.obsidianUrl && (
          <ObsidianIcon
            className="h-4 w-4 text-muted-foreground hover:text-purple-500 cursor-pointer"
            onClick={(e) => {
              e.stopPropagation()
              window.api.openExternal(task.obsidianUrl!)
            }}
          />
        )}
      </div>
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/task-list/task-list.tsx
import { useEffect, useMemo } from 'react'
import { ScrollArea } from '@/renderer/components/ui/scroll-area'
import { useTaskStore } from '@/renderer/stores/task-store'
import { useFilterStore } from '@/renderer/stores/task-filter-store'
import { TaskItem } from './task-item'
import { useDebounce } from 'use-debounce'
import { isWithinInterval } from 'date-fns'

export function TaskList() {
  const { tasks, updateTask, setFilteredTasks } = useTaskStore()
  const { 
    status, 
    search, 
    sortOrder = 'most-recent',
    dateRange,
    customDateFrom,
    customDateTo,
    getDateRange 
  } = useFilterStore()
  const [debouncedSearch] = useDebounce(search, 300)

  const dateRangeValue = useMemo(() => getDateRange(), [
    dateRange,
    customDateFrom,
    customDateTo,
    getDateRange
  ])

  const filteredAndSortedTasks = useMemo(() => {
    const { from, to } = dateRangeValue

    return tasks
      .filter((task) => {
        // Date range filter
        const taskDate = new Date(task.stats.created)
        if (!isWithinInterval(taskDate, { start: from, end: to })) {
          return false
        }

        // Status filter
        if (status !== 'all') {
          const isCompleted = status === 'completed'
          if (task.completed !== isCompleted) return false
        }

        // Search filter
        if (debouncedSearch) {
          const searchLower = debouncedSearch.toLowerCase()
          return (
            task.title.toLowerCase().includes(searchLower) ||
            task.tags.some((tag) => tag.toLowerCase().includes(searchLower))
          )
        }

        return true
      })
      .sort((a, b) => {
        const aTime = new Date(a.stats.created).getTime()
        const bTime = new Date(b.stats.created).getTime()
        return sortOrder === 'most-recent' 
          ? bTime - aTime  // Most recent first
          : aTime - bTime  // Least recent first
      })
      .slice(0, 100)
  }, [
    tasks,
    status,
    debouncedSearch,
    sortOrder,
    dateRangeValue // Use the memoized date range value
  ])

  // Update filtered tasks in store whenever they change
  useEffect(() => {
    setFilteredTasks(filteredAndSortedTasks)
  }, [filteredAndSortedTasks, setFilteredTasks])

  const handleTaskToggle = async (taskId: string) => {
    const task = tasks.find((t) => t.id === taskId)
    if (!task) return

    try {
      const content = await window.api.readMarkdownFile(task.filePath)
      const updatedContent = content.content.replace(
        /- \[([ xX])\] (.*)/g,
        (match: string, check: string, text: string) => {
          if (text.includes(task.title)) {
            return `- [${check === ' ' ? 'x' : ' '}] ${text}`
          }
          return match
        }
      )

      await window.api.writeMarkdownFile(task.filePath, updatedContent)
      updateTask(taskId, { completed: !task.completed })
    } catch (error) {
      console.error('Failed to toggle task:', error)
    }
  }

  if (!tasks.length) {
    return (
      <div className="text-center text-muted-foreground py-4">
        No tasks found
      </div>
    )
  }

  return (
    <ScrollArea className="h-[calc(100vh-22rem)]">
      <div className="px-4 space-y-2">
        {filteredAndSortedTasks.map((task) => (
          <TaskItem 
            key={task.id}
            task={task}
            onToggle={handleTaskToggle}
          />
        ))}
      </div>
    </ScrollArea>
  )
} 

File: ./packages/desktop/src/renderer/components/task-filters.tsx
import { useFilterStore } from '@/renderer/stores/task-filter-store'
import { useTaskStore } from '@/renderer/stores/task-store'
import { useTaskAIStore } from '@/renderer/stores/task-ai-store'
import { useApiKeyStore } from '@/stores/api-key-store'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Calendar, Search } from 'lucide-react'

export function TaskFilters() {
  const { 
    status, 
    search, 
    dateRange,
    setStatus, 
    setSearch, 
    setDateRange,
  } = useFilterStore()

  const { filteredTasks } = useTaskStore()
  const { apiKey } = useApiKeyStore()
  const { analyzeRecentTasks, isLoading } = useTaskAIStore()

  const handleSearch = () => {
    if (filteredTasks.length && apiKey && !isLoading) {
      analyzeRecentTasks(filteredTasks, apiKey)
    }
  }

  return (
    <div className="flex items-center gap-2">
      <div className="flex items-center gap-2">
        <Input
          type="text"
          placeholder="Search tasks..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="w-[200px]"
        />
        <Button
          variant="secondary"
          size="sm"
          onClick={handleSearch}
          disabled={isLoading}
        >
          <Search className="h-4 w-4 mr-2" />
          Search
        </Button>
      </div>
      
      <Select
        value={status}
        onValueChange={(value: 'all' | 'open' | 'completed') => setStatus(value)}
      >
        <SelectTrigger className="w-[120px]">
          <SelectValue placeholder="Status" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="all">All</SelectItem>
          <SelectItem value="open">Open</SelectItem>
          <SelectItem value="completed">Completed</SelectItem>
        </SelectContent>
      </Select>

      <Select
        value={dateRange}
        onValueChange={(value: typeof dateRange) => setDateRange(value)}
      >
        <SelectTrigger className="w-[180px]">
          <div className="flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            <SelectValue placeholder="Date range" />
          </div>
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="7-days">Last 7 days</SelectItem>
          <SelectItem value="14-days">Last 14 days</SelectItem>
          <SelectItem value="30-days">Last 30 days</SelectItem>
          <SelectItem value="3-months">Last 3 months</SelectItem>
          <SelectItem value="1-year">Last year</SelectItem>
        </SelectContent>
      </Select>
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/chat-history.tsx
import { format } from 'date-fns'
import { Trash2, Clock } from 'lucide-react'
import { Button } from '@/renderer/components/ui/button'
import { useChatHistoryStore } from '@/stores/chat-history-store'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/renderer/components/ui/dropdown-menu'
import { ScrollArea } from '@/renderer/components/ui/scroll-area'

export function ChatHistory() {
  const { 
    sessions, 
    currentSessionId, 
    setCurrentSession, 
    deleteSession 
  } = useChatHistoryStore()

  if (sessions.length === 0) {
    return null
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="bg-white hover:bg-gray-50"
        >
          <Clock className="w-4 h-4 mr-2" />
          History
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent 
        align="end" 
        className="w-[300px]"
      >
        <ScrollArea className="h-[400px]">
          {sessions.map((session) => (
            <DropdownMenuItem
              key={session.id}
              className={`flex flex-col items-stretch p-2 cursor-pointer
                ${currentSessionId === session.id 
                  ? 'bg-blue-50' 
                  : 'hover:bg-gray-50'
                }`}
              onClick={() => setCurrentSession(session.id)}
            >
              <div className="flex justify-between items-center w-full">
                <span className="text-sm font-medium">
                  {format(session.timestamp, 'MMM d, h:mm a')}
                </span>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 hover:bg-red-100"
                  onClick={(e) => {
                    e.stopPropagation()
                    deleteSession(session.id)
                  }}
                >
                  <Trash2 className="h-4 w-4 text-red-500" />
                </Button>
              </div>
              {session.filePath && (
                <p className="text-xs text-gray-500 truncate mt-1">
                  {session.filePath}
                </p>
              )}
            </DropdownMenuItem>
          ))}
        </ScrollArea>
      </DropdownMenuContent>
    </DropdownMenu>
  )
} 

File: ./packages/desktop/src/renderer/components/virtual-task-list.tsx
import { useVirtualizer } from '@tanstack/react-virtual';
import { useRef } from 'react';

// Define the Task type - adjust properties based on your actual task structure
interface Task {
  id: string;
  // ... other task properties
}

interface VirtualTaskListProps {
  tasks: Task[];
  renderTask: (task: Task, index: number) => React.ReactNode;
}

export function VirtualTaskList({ tasks, renderTask }: VirtualTaskListProps) {
  const parentRef = useRef<HTMLDivElement>(null);

  const virtualizer = useVirtualizer({
    count: tasks.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 40,
    overscan: 5,
  });

  return (
    <div ref={parentRef} className="h-full overflow-auto">
      <div
        style={{
          height: `${virtualizer.getTotalSize()}px`,
          width: '100%',
          position: 'relative',
        }}
      >
        {virtualizer.getVirtualItems().map((virtualItem) => (
          <div
            key={virtualItem.key}
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              height: `${virtualItem.size}px`,
              transform: `translateY(${virtualItem.start}px)`,
            }}
          >
            {renderTask(tasks[virtualItem.index], virtualItem.index)}
          </div>
        ))}
      </div>
    </div>
  );
} 

File: ./packages/desktop/src/renderer/components/file-explorer.tsx
import React, { useState, useEffect } from 'react'
import { FileIcon, FolderIcon, Settings, Key, ExternalLink } from 'lucide-react'
import { cn } from '@/lib/utils'
import { Button } from '@/renderer/components/ui/button'
import type { FileInfo } from '@/renderer/types'
import { useApiKeyStore } from '@/stores/api-key-store'
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
} from '@/renderer/components/ui/context-menu'
import { ScrollArea } from '@/renderer/components/ui/scroll-area'
import { useEditorStore } from '@/renderer/stores/editor-store'

function ApiKeyModal({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) {
  const { apiKey, setApiKey, removeApiKey } = useApiKeyStore()
  const [tempApiKey, setTempApiKey] = useState('')

  const handleSave = () => {
    if (tempApiKey.trim()) {
      setApiKey(tempApiKey)
      setTempApiKey('')
    }
    onClose()
  }

  const handleRemove = () => {
    removeApiKey()
    onClose()
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-semibold mb-4">OpenAI API Key Settings</h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Current API Key
            </label>
            <input
              type="password"
              value={apiKey || ''}
              disabled
              className="w-full px-3 py-2 border border-gray-200 rounded-md bg-gray-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              New API Key
            </label>
            <input
              type="password"
              value={tempApiKey}
              onChange={(e) => setTempApiKey(e.target.value)}
              placeholder="sk-..."
              className="w-full px-3 py-2 border border-gray-200 rounded-md"
            />
          </div>
          <div className="flex justify-end space-x-2 pt-4">
            <Button
              variant="outline"
              onClick={handleRemove}
              className="text-red-600 hover:text-red-700"
            >
              Remove Key
            </Button>
            <Button
              variant="outline"
              onClick={onClose}
            >
              Cancel
            </Button>
            <Button
              onClick={handleSave}
              className="bg-blue-600 hover:bg-blue-700 text-white"
              disabled={!tempApiKey.trim()}
            >
              Save
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}

interface FileExplorerProps {
  vaultPath: string
  onSelectVault: () => void
  onCreateVault: () => void
}

export function FileExplorer({
  vaultPath,
  onSelectVault,
  onCreateVault,
}: FileExplorerProps) {
  const [files, setFiles] = useState<FileInfo[]>([])
  const [currentPath, setCurrentPath] = useState<string>(vaultPath)
  const [isApiKeyModalOpen, setIsApiKeyModalOpen] = useState(false)
  const [expandedFolders, setExpandedFolders] = useState<Record<string, boolean>>({})
  const [folderContents, setFolderContents] = useState<Record<string, FileInfo[]>>({})
  
  // Get the setActiveFile from our store
  const { activeFile, setActiveFile } = useEditorStore()

  const loadFiles = async (directoryPath: string) => {
    try {
      if (!directoryPath) return;
      
      const loadedFiles = await window.api.listFiles(directoryPath);
      setFiles(loadedFiles);
      setCurrentPath(directoryPath);
    } catch (error) {
      console.error('Failed to load files:', error);
    }
  };

  // Load initial files when vault path changes
  useEffect(() => {
    if (vaultPath) {
      loadFiles(vaultPath);
    }
  }, [vaultPath]);

  const toggleFolder = async (folder: FileInfo) => {
    if (expandedFolders[folder.path]) {
      // Collapse folder
      setExpandedFolders(prev => ({
        ...prev,
        [folder.path]: false
      }))
      return
    }

    try {
      // Expand folder and load contents
      const contents = await window.api.listFolderContents(folder.path)
      setFolderContents(prev => ({
        ...prev,
        [folder.path]: contents
      }))
      setExpandedFolders(prev => ({
        ...prev,
        [folder.path]: true
      }))
    } catch (error) {
      console.error('Failed to load folder contents:', error)
    }
  }

  const handleFileSelect = async (file: FileInfo) => {
    if (!file.isDirectory && isMarkdown(file)) {
      try {
        // Use readMarkdownFile instead of readFile
        const content = await window.api.readMarkdownFile(file.path)
        setActiveFile({
          path: file.path,
          content
        })
      } catch (error) {
        console.error('Failed to load file:', error)
      }
    }
  }

  const handleReveal = async (file: FileInfo) => {
    try {
      // Use revealInFileSystem instead of revealInFileExplorer
      await window.api.revealInFileSystem(file.path)
    } catch (error) {
      console.error('Failed to reveal file:', error)
    }
  }

  const renderFileItem = (file: FileInfo, depth = 0) => {
    if (!file.isDirectory && !isMarkdown(file)) {
      return null
    }

    const isActive = activeFile?.path === file.path

    return (
      <div className="">
        <ContextMenu>
          <ContextMenuTrigger>
            <button
              onClick={() => file.isDirectory ? toggleFolder(file) : handleFileSelect(file)}
              className={cn(
                "w-full flex items-center space-x-2 px-2 py-1 rounded-md hover:bg-accent text-sm",
                "text-left transition-colors",
                isActive && "bg-accent",
                !file.isDirectory && !isMarkdown(file) && "opacity-50 cursor-not-allowed"
              )}
              style={{ paddingLeft: `${(depth + 1) * 0.5}rem` }}
            >
              {file.isDirectory ? (
                <FolderIcon className={cn(
                  "h-4 w-4 transition-transform",
                  expandedFolders[file.path] && "transform rotate-90"
                )} />
              ) : (
                <FileIcon className="h-4 w-4" />
              )}
              <span className="truncate">{file.name}</span>
            </button>
          </ContextMenuTrigger>
          <ContextMenuContent>
            <ContextMenuItem onClick={() => handleReveal(file)}>
              <ExternalLink className="h-4 w-4 mr-2" />
              Reveal in File System
            </ContextMenuItem>
          </ContextMenuContent>
        </ContextMenu>
        
        {/* Add nested folder contents */}
        {expandedFolders[file.path] && folderContents[file.path] && (
          <div className="ml-2">
            {folderContents[file.path]
              .sort((a, b) => {
                if (a.isDirectory !== b.isDirectory) {
                  return a.isDirectory ? -1 : 1
                }
                return a.name.localeCompare(b.name)
              })
              .map(nestedFile => (
                <div key={nestedFile.path}>
                  {renderFileItem(nestedFile, depth + 1)}
                </div>
              ))
            }
          </div>
        )}
      </div>
    )
  }

  const isMarkdown = (file: FileInfo) => file.name.toLowerCase().endsWith('.md')

  const sortedFiles = [...files].sort((a, b) => {
    // Directories first
    if (a.isDirectory !== b.isDirectory) {
      return a.isDirectory ? -1 : 1
    }
    // Then alphabetically
    return a.name.localeCompare(b.name)
  })

  return (
    <div className="w-64 border-r border-border bg-muted/30 flex flex-col h-screen">
      <ScrollArea className="flex-1">
        <div className="p-2">
          <div className="flex items-center justify-between px-2 mb-4">
            <h2 className="text-lg font-semibold">Files</h2>
          </div>
          <div className="space-y-1">
            {sortedFiles.map(file => <div key={file.path}>{renderFileItem(file)}</div>)}
          </div>
        </div>
      </ScrollArea>
      
      {/* Vault Settings - Fixed at bottom */}
      <div className="p-4 border-t border-border shrink-0">
        <div className="space-y-2">
          <Button 
            variant="outline" 
            size="sm"
            className="w-full justify-start"
            onClick={onSelectVault}
          >
            <FolderIcon className="h-4 w-4 mr-2" />
            Switch Vault
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            className="w-full justify-start"
            onClick={onCreateVault}
          >
            <Settings className="h-4 w-4 mr-2" />
            Create New Vault
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            className="w-full justify-start"
            onClick={() => setIsApiKeyModalOpen(true)}
          >
            <Key className="h-4 w-4 mr-2" />
            API Key Settings
          </Button>
        </div>
      </div>

      <ApiKeyModal 
        isOpen={isApiKeyModalOpen}
        onClose={() => setIsApiKeyModalOpen(false)}
      />
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/task-ai/task-ai.tsx
import { useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/renderer/components/ui/card'
import { useTaskStore } from '@/renderer/stores/task-store'
import { useTaskAIStore } from '@/renderer/stores/task-ai-store'
import { useApiKeyStore } from '@/stores/api-key-store'
import { useFilterStore } from '@/renderer/stores/task-filter-store'
import { ActionableSteps } from './actionable-steps'
import { UpdateControl } from './update-control'

export function TaskAI() {
  const { filteredTasks } = useTaskStore()
  const { apiKey } = useApiKeyStore()
  const { analyzeRecentTasks, autoRefresh } = useTaskAIStore()
  const { getDateRangeLabel } = useFilterStore()

  useEffect(() => {
    if (autoRefresh && filteredTasks.length && apiKey) {
      analyzeRecentTasks(filteredTasks, apiKey)
    }
  }, [filteredTasks, apiKey, analyzeRecentTasks, autoRefresh])

  return (
    <div className="relative">
      <Card className="h-full relative">
        {/* Context Badge */}
        <div className="mb-2">
          <div className="bg-secondary/80 text-secondary-foreground px-3 py-2 rounded-t-md text-xs flex items-center gap-2">
            <span className="font-medium">Context:</span>
            <span>Tasks from</span>
            <span>{getDateRangeLabel()}</span>
            <span className="text-muted-foreground">
              ({filteredTasks.length} tasks)
            </span>
          </div>
        </div>
        
        {/* Update Control */}
        <UpdateControl />

        <CardHeader>
          <CardTitle>AI Insights</CardTitle>
          <CardDescription>AI-powered task analysis and suggestions</CardDescription>
        </CardHeader>
        <CardContent>
          <ActionableSteps />
        </CardContent>
      </Card>
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/task-ai/actionable-step.tsx
import { useState } from 'react'
import { cn } from '@/lib/utils'
import { useEditorStore } from '@/renderer/stores/editor-store'
import { Button } from '@/renderer/components/ui/button'
import { FileText, ChevronDown } from 'lucide-react'
import { ObsidianIcon } from '@/renderer/components/obsidian-icon'
import type { ActionableStep as ActionableStepType } from '@/renderer/stores/task-ai-store'

interface ActionableStepProps {
  step: ActionableStepType
}

export function ActionableStep({ step }: ActionableStepProps) {
  const [isExpanded, setIsExpanded] = useState(false)
  const { openFile } = useEditorStore()

  const formattedDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    })
  }

  return (
    <div className="border rounded-md overflow-hidden transition-all duration-200 ease-in-out">
      <div
        className={cn(
          'flex items-center gap-2 p-2 cursor-pointer hover:bg-secondary/50',
          isExpanded && 'border-b'
        )}
      >
        <div className="flex-1 flex items-center gap-2">
          <div className="flex-1">
            <div className="font-medium">{step.text}</div>
            <div className="text-sm text-muted-foreground flex items-center gap-2">
              <span>Modified: {formattedDate(step.fileModified)}</span>
              {step.tags.length > 0 && (
                <div className="flex gap-1">
                  {step.tags.map((tag) => (
                    <span
                      key={tag}
                      className="text-xs bg-secondary px-1.5 py-0.5 rounded-full"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="icon"
              onClick={(e) => {
                e.stopPropagation()
                openFile(step.filePath)
              }}
              className="h-8 w-8"
            >
              <FileText className="h-4 w-4" />
            </Button>
            {step.obsidianUrl && (
              <Button
                variant="ghost"
                size="icon"
                onClick={(e) => {
                  e.stopPropagation()
                  window.api.openExternal(step.obsidianUrl!)
                }}
                className="h-8 w-8"
              >
                <ObsidianIcon className="h-4 w-4 text-muted-foreground hover:text-purple-500" />
              </Button>
            )}
            <ChevronDown
              className={cn(
                'h-4 w-4 transition-transform duration-200',
                isExpanded && 'transform rotate-180'
              )}
              onClick={() => setIsExpanded(!isExpanded)}
            />
          </div>
        </div>
      </div>

      <div
        className={cn(
          'overflow-hidden transition-all duration-200',
          isExpanded ? 'max-h-96' : 'max-h-0'
        )}
      >
        <div className="p-4 space-y-3 text-sm bg-secondary/10">
          <div>
            <div className="mt-1 pl-4 border-l-2 border-secondary">
              {step.taskContext}
            </div>
          </div>

          <div>
            <span className="font-medium">Why it's important: </span>
            {step.llmAnalysis.importance}
          </div>

          <div>
            <span className="font-medium">Estimated time: </span>
            {step.llmAnalysis.estimatedTime}
          </div>

          {step.llmAnalysis.suggestedNextSteps?.length > 0 && (
            <div>
              <span className="font-medium">Suggested next steps:</span>
              <ul className="list-disc pl-4 mt-1">
                {step.llmAnalysis.suggestedNextSteps.map((nextStep, i) => (
                  <li key={i}>{nextStep}</li>
                ))}
              </ul>
            </div>
          )}

          <div className="text-xs text-muted-foreground mt-2 pt-2 border-t">
            <div>Created: {formattedDate(step.fileCreated)}</div>
            <div>Modified: {formattedDate(step.fileModified)}</div>
            <div className="truncate">Path: {step.filePath}</div>
          </div>
        </div>
      </div>
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/task-ai/actionable-steps.tsx
import { useTaskAIStore } from '@/renderer/stores/task-ai-store'
import { Loader2 } from 'lucide-react'
import { ActionableStep } from './actionable-step'
import { useDebounce } from 'use-debounce'

export function ActionableSteps() {
  const { actionableSteps, isLoading } = useTaskAIStore()
  // throttle the re-rendering of the steps
  const [debouncedActionableSteps] = useDebounce(actionableSteps, 50)

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-4">
        <Loader2 className="h-6 w-6 animate-spin mr-2" />
        <span>Analyzing tasks...</span>
      </div>
    )
  }

  if (!actionableSteps.length) {
    return (
      <div className="text-center text-muted-foreground py-4">
        No actionable steps found
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {debouncedActionableSteps.map((step) => (
        <ActionableStep key={step.id} step={step} />
      ))}
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/task-ai/update-control.tsx
import { useTaskStore } from '@/renderer/stores/task-store'
import { useTaskAIStore } from '@/renderer/stores/task-ai-store'
import { useApiKeyStore } from '@/stores/api-key-store'
import { Button } from '@/components/ui/button'
import { Checkbox } from '@/components/ui/checkbox'
import { ArrowDownToLine } from 'lucide-react'
import { motion } from 'framer-motion'

export function UpdateControl() {
  const { filteredTasks } = useTaskStore()
  const { apiKey } = useApiKeyStore()
  const { analyzeRecentTasks, isLoading, autoRefresh, setAutoRefresh } = useTaskAIStore()

  const handleUpdate = () => {
    if (filteredTasks.length && apiKey && !isLoading) {
      analyzeRecentTasks(filteredTasks, apiKey)
    }
  }

  return (
    <div className="flex items-center gap-4 bg-background/80 backdrop-blur-sm px-4 py-2 rounded-t-md">
      <div className="flex items-center gap-2">
        <Checkbox 
          id="auto-update"
          checked={autoRefresh}
          onCheckedChange={(checked) => setAutoRefresh(checked as boolean)}
        />
        <label 
          htmlFor="auto-update" 
          className="text-sm text-muted-foreground cursor-pointer"
        >
          Auto-update
        </label>
      </div>
      
      <div className="flex items-center gap-2">
        <motion.div
          animate={{
            scale: isLoading ? [1, 1.2, 1] : 1,
            color: isLoading ? '#0ea5e9' : '#64748b',
          }}
          transition={{
            duration: 0.5,
            repeat: isLoading ? Infinity : 0,
          }}
        >
          <ArrowDownToLine className="h-4 w-4" />
        </motion.div>
        <Button
          variant="ghost"
          size="sm"
          onClick={handleUpdate}
          disabled={isLoading}
          className={isLoading ? 'text-primary' : ''}
        >
          Update
        </Button>
      </div>
    </div>
  )
} 

File: ./packages/desktop/src/renderer/components/filter-divider.tsx
import { motion } from 'framer-motion'
import { ArrowDownToLine } from 'lucide-react'
import { useTaskAIStore } from '@/renderer/stores/task-ai-store'

export function FilterDivider() {
  const { isLoading } = useTaskAIStore()

  return (
    <div className="relative py-4">
      <div className="absolute left-1/2 transform -translate-x-1/2">
        <motion.div
          animate={{
            scale: isLoading ? [1, 1.2, 1] : 1,
            color: isLoading ? '#0ea5e9' : '#64748b',
          }}
          transition={{
            duration: 0.5,
            repeat: isLoading ? Infinity : 0,
          }}
        >
          <ArrowDownToLine className="h-6 w-6" />
        </motion.div>
      </div>
    </div>
  )
} 

File: ./packages/desktop/src/renderer/app copy.tsx
import React, { useState, useEffect } from 'react';
import { Button } from '@/renderer/components/ui/button';
import { MarkdownEditor } from './components/markdown-editor';
import type { VaultConfig } from '@/renderer/types';
import { FileExplorer } from './components/file-explorer';
import { TaskDashboard } from './components/task-dashboard';
import { Folder, FileText } from 'lucide-react';
import { useEditorStore } from './stores/editor-store';
import { cn } from '@/lib/utils';

export function App() {
  const [vaultConfig, setVaultConfig] = useState<VaultConfig | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isFileExplorerCollapsed, setIsFileExplorerCollapsed] = useState(true);
  const [isEditorCollapsed, setIsEditorCollapsed] = useState(true);
  const { activeFile } = useEditorStore();

  // Load vault config
  useEffect(() => {
    const checkVaultConfig = async () => {
      try {
        const config = await window.api.getVaultConfig();
        if (config?.path) {
          setVaultConfig(config);
        }
      } catch (error) {
        console.error('Failed to get vault config:', error);
      } finally {
        setIsLoading(false);
      }
    };

    checkVaultConfig();
  }, []);

  // Show editor when a file is active
  useEffect(() => {
    if (activeFile && isEditorCollapsed) {
      setIsEditorCollapsed(false);
    }
  }, [activeFile]);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="h-screen grid" style={{
      gridTemplateColumns: `
        ${isFileExplorerCollapsed ? '3rem' : '250px'} 
        1fr 
        ${!isEditorCollapsed ? '400px' : '3rem'}
      `
    }}>
      {/* File Explorer */}
      {isFileExplorerCollapsed ? (
        <div className="border-r bg-background flex flex-col items-center py-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsFileExplorerCollapsed(false)}
          >
            <Folder className="h-5 w-5" />
          </Button>
        </div>
      ) : (
        <div className="border-r bg-background relative">
          <Button
            variant="ghost"
            size="icon"
            className="absolute right-2 top-2"
            onClick={() => setIsFileExplorerCollapsed(true)}
          >
            <Folder className="h-5 w-5" />
          </Button>
          {vaultConfig && (
            <FileExplorer
              vaultPath={vaultConfig.path}
              onSelectVault={() => {}}
              onCreateVault={() => {}}
            />
          )}
        </div>
      )}

      {/* Main Content */}
      <div className="overflow-auto">
        {vaultConfig && <TaskDashboard vaultPath={vaultConfig.path} />}
      </div>

      {/* Editor */}
      <div className={cn(
        "border-l bg-background transition-all duration-200",
        isEditorCollapsed && !activeFile && "hidden"
      )}>
        {isEditorCollapsed ? (
          <div className="flex flex-col items-center py-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsEditorCollapsed(false)}
            >
              <FileText className="h-5 w-5" />
            </Button>
          </div>
        ) : (
          <div className="h-full relative">
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-2 top-2"
              onClick={() => setIsEditorCollapsed(true)}
            >
              <FileText className="h-5 w-5" />
            </Button>
            <MarkdownEditor />
          </div>
        )}
      </div>
    </div>
  );
}


File: ./packages/desktop/src/renderer/task-utils.ts
export interface Task {
  id: string
  title: string
  completed: boolean
  filePath: string
  tags: string[]
  context: string
  stats: {
    created: string
    modified: string
  }
  obsidianUrl?: string
}

export async function getAllTasks(vaultPath: string): Promise<Task[]> {
  try {
    return await window.api.getAllTasks(vaultPath)
  } catch (error) {
    console.error('Error getting tasks:', error)
    throw error
  }
}

export function isTaskWithinDateRange(task: Task, days: number): boolean {
  const taskDate = new Date(task.stats.modified)
  const cutoffDate = new Date()
  cutoffDate.setDate(cutoffDate.getDate() - days)
  return taskDate >= cutoffDate
}

File: ./packages/desktop/src/app/layout.tsx
import '@/app/globals.css'
import { Inter } from 'next/font/google'
import { ThemeProvider } from "@/components/theme-provider"

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  )
}



File: ./packages/desktop/src/app/page.tsx
import React from 'react'
import { AnimatePresence, motion } from 'framer-motion'
import { DashboardHeader } from '@/components/dashboard-header'
import { TaskManager } from '@/components/task-manager'
import { Integrations } from '@/components/integrations'
import { Notifications } from '@/components/notifications'
import { AIAgentStore } from '@/components/ai-agent-store'
import { AutomationInsights } from '@/components/automation-insights'
import { TaskClassification } from '@/components/task-classification'
import { AutomationProgress } from '@/components/automation-progress'
import { ActiveAgents } from '@/components/active-agents'
import { ConnectedApps } from '@/components/connected-apps'
import { useDashboardStore } from '@/stores/dashboard-store'

export default function DashboardPage() {
  const [activePanel, setActivePanel] = React.useState('overview')
  const { tasks, setTasks } = useDashboardStore()

  function renderOverviewPanel() {
    return (
      <div className="space-y-6">
        <TaskClassification />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          <AutomationProgress />
          <ActiveAgents />
          <ConnectedApps />
        </div>
      </div>
    )
  }

  function renderPanel() {
    switch (activePanel) {
      case 'overview':
        return renderOverviewPanel()
      case 'tasks':
        return <TaskManager tasks={tasks} setTasks={setTasks} />
      case 'integrations':
        return <Integrations />
      case 'notifications':
        return <Notifications />
      case 'aiAgents':
        return <AIAgentStore />
      case 'insights':
        return <AutomationInsights tasks={tasks} />
      default:
        return null
    }
  }

  return (
    <div className="dark min-h-screen bg-background text-foreground">
      <DashboardHeader
        activePanel={activePanel}
        setActivePanel={setActivePanel}
      />
      <main className="container mx-auto p-4">
        <div className="space-y-4">
          <AnimatePresence mode="wait">
            <motion.div
              key={activePanel}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.2 }}
            >
              {renderPanel()}
            </motion.div>
          </AnimatePresence>
        </div>
      </main>
    </div>
  )
}


File: ./packages/desktop/src/stores/chat-history-store.ts
import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import { format } from 'date-fns'

export interface ChatSession {
  id: string
  timestamp: number
  title: string
  messages: any[]
  filePath?: string
}

interface ChatHistoryState {
  sessions: ChatSession[]
  currentSessionId: string | null
  createSession: () => string
  addMessageToSession: (sessionId: string, message: any) => void
  updateSessionTitle: (sessionId: string, title: string) => void
  setCurrentSession: (sessionId: string) => void
  deleteSession: (sessionId: string) => void
}

export const useChatHistoryStore = create<ChatHistoryState>()(
  persist(
    (set, get) => ({
      sessions: [],
      currentSessionId: null,
      createSession: () => {
        const newSession: ChatSession = {
          id: crypto.randomUUID(),
          timestamp: Date.now(),
          title: `New Chat ${format(new Date(), 'MMM d, h:mm a')}`,
          messages: [],
        }
        set(state => ({
          sessions: [newSession, ...state.sessions],
          currentSessionId: newSession.id
        }))
        return newSession.id
      },
      addMessageToSession: (sessionId, message) => {
        set(state => ({
          sessions: state.sessions.map(session => {
            if (session.id !== sessionId) return session
            
            const updatedMessages = [...session.messages, message]
            
            // Generate title from first user message if not already set
            let title = session.title
            if (title.startsWith('New Chat') && message.role === 'user') {
              title = message.content.slice(0, 30) + (message.content.length > 30 ? '...' : '')
            }
            
            return {
              ...session,
              messages: updatedMessages,
              title
            }
          })
        }))
      },
      updateSessionTitle: (sessionId, title) => {
        set(state => ({
          sessions: state.sessions.map(session =>
            session.id === sessionId
              ? { ...session, title }
              : session
          )
        }))
      },
      setCurrentSession: (sessionId) => {
        set({ currentSessionId: sessionId })
      },
      deleteSession: (sessionId) => {
        set(state => ({
          sessions: state.sessions.filter(s => s.id !== sessionId),
          currentSessionId: state.currentSessionId === sessionId 
            ? state.sessions[1]?.id ?? null 
            : state.currentSessionId
        }))
      }
    }),
    { name: 'chat-history' }
  )
) 

File: ./packages/desktop/src/stores/dashboard-store.ts
import { create } from 'zustand'

export type Task = {
  id: number
  title: string
  completed: boolean
  date: string
  automated: boolean
}

type DashboardStore = {
  tasks: Task[]
  setTasks: (tasks: Task[]) => void
  addTask: (task: Omit<Task, 'id'>) => void
  automationRate: () => number
}

export const useDashboardStore = create<DashboardStore>((set, get) => ({
  tasks: [
    {
      id: 1,
      title: 'Review Unconf speaker list',
      completed: false,
      date: '2023-06-15',
      automated: false,
    },
    {
      id: 2,
      title: 'Prepare Vitalik introduction',
      completed: true,
      date: '2023-06-10',
      automated: true,
    },
    {
      id: 3,
      title: 'Update Unconf website',
      completed: false,
      date: '2023-06-20',
      automated: false,
    },
    {
      id: 4,
      title: 'Coordinate with sponsors',
      completed: false,
      date: '2023-06-25',
      automated: true,
    },
    {
      id: 5,
      title: 'Draft tweet about Vitalik',
      completed: false,
      date: '2023-06-30',
      automated: true,
    },
  ],
  setTasks: (tasks) => set({ tasks }),
  addTask: (task) => set((state) => ({ 
    tasks: [...state.tasks, { ...task, id: state.tasks.length + 1 }] 
  })),
  automationRate: () => {
    const tasks = get().tasks
    return (tasks.filter((task) => task.automated).length / tasks.length) * 100
  },
})) 

File: ./packages/desktop/src/stores/api-key-store.ts
import { create } from 'zustand'

const API_KEY_STORAGE_KEY = 'openai-api-key'

interface ApiKeyState {
  apiKey: string | null
  setApiKey: (key: string | null) => void
  removeApiKey: () => void
}

export const useApiKeyStore = create<ApiKeyState>((set) => ({
  apiKey: localStorage.getItem(API_KEY_STORAGE_KEY),
  setApiKey: (key: string | null) => {
    if (key) {
      localStorage.setItem(API_KEY_STORAGE_KEY, key)
    }
    set({ apiKey: key })
  },
  removeApiKey: () => {
    localStorage.removeItem(API_KEY_STORAGE_KEY)
    set({ apiKey: null })
  },
})) 

File: ./packages/desktop/src/stores/model-store.ts
import { create } from 'zustand'

export type ModelType = 'gpt-4o' | 'o1-preview'

interface ModelState {
  selectedModel: ModelType
  setSelectedModel: (model: ModelType) => void
}

export const useModelStore = create<ModelState>((set) => ({
  selectedModel: 'gpt-4o',
  setSelectedModel: (model) => set({ selectedModel: model }),
})) 

File: ./packages/desktop/src/components/theme-provider.tsx
import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes/dist/types"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}



File: ./packages/desktop/src/components/ui/tabs.tsx
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent } 

File: ./packages/desktop/src/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


File: ./packages/desktop/src/components/ui/progress.tsx
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


File: ./packages/desktop/src/components/ui/label.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


File: ./packages/desktop/src/components/ui/switch.tsx
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


File: ./packages/desktop/src/components/ui/avatar.tsx
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


File: ./packages/desktop/src/components/ui/badge.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


File: ./packages/desktop/src/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


File: ./packages/desktop/src/components/ui/checkbox.tsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


File: ./packages/desktop/src/components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


File: ./packages/desktop/src/components/ui/select.tsx
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


File: ./packages/desktop/src/components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


File: ./packages/desktop/src/components/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("card bg-card text-card-foreground", className)}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



File: ./packages/desktop/src/components/task-manager.tsx
import { useState } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Checkbox } from '@/components/ui/checkbox'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Plus, Sparkles, ArrowRight, CheckCircle2, Zap } from 'lucide-react'
import { Badge } from '@/components/ui/badge'
import { Switch } from '@/components/ui/switch'

export function TaskManager({ tasks, setTasks }) {
  const [newTask, setNewTask] = useState('')

  const addTask = (e) => {
    e.preventDefault()
    if (newTask.trim()) {
      setTasks([...tasks, { id: Date.now(), title: newTask, completed: false, automated: false, date: new Date().toISOString().split('T')[0] }])
      setNewTask('')
    }
  }

  const toggleTask = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ))
  }

  const toggleAutomation = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, automated: !task.automated } : task
    ))
  }

  const deleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id))
  }

  return (
    <div className="space-y-4">
      <form onSubmit={addTask} className="flex space-x-2">
        <Input
          className="flex-grow"
          placeholder="Add a new task..."
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
        />
        <Button type="submit">Add Task</Button>
      </form>
      <div className="space-y-2">
        {tasks.map((task) => (
          <Card key={task.id}>
            <CardContent className="flex items-center justify-between p-4">
              <div className="flex items-center space-x-2">
                <Checkbox
                  checked={task.completed}
                  onCheckedChange={() => toggleTask(task.id)}
                />
                <span className={task.completed ? 'line-through text-muted-foreground' : ''}>
                  {task.title}
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <Badge variant={task.automated ? 'default' : 'secondary'}>
                  {task.automated ? 'Automated' : 'Manual'}
                </Badge>
                <Button variant="ghost" size="sm" onClick={() => toggleAutomation(task.id)}>
                  {task.automated ? 'Make Manual' : 'Automate'}
                </Button>
                <Button variant="ghost" size="sm" onClick={() => deleteTask(task.id)}>
                  Delete
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}



File: ./packages/desktop/src/components/connected-apps.tsx
import React from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Twitter, MessageSquare, Zap } from 'lucide-react'

export function ConnectedApps() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Connected Apps</CardTitle>
        <CardDescription>Your integrated services</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-wrap gap-2">
          <Badge variant="secondary">
            <Twitter className="w-4 h-4 mr-1" />
            Twitter
          </Badge>
          <Badge variant="secondary">
            <MessageSquare className="w-4 h-4 mr-1" />
            Slack
          </Badge>
          <Badge variant="secondary">
            <Zap className="w-4 h-4 mr-1" />
            Zapier
          </Badge>
        </div>
        <Button variant="outline" className="mt-4 w-full">
          Add More Integrations
        </Button>
      </CardContent>
    </Card>
  )
} 

File: ./packages/desktop/src/components/automation-progress.tsx
import React from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { useDashboardStore } from '@/stores/dashboard-store'

export function AutomationProgress() {
  const { tasks, automationRate } = useDashboardStore()
  const rate = automationRate()

  return (
    <Card>
      <CardHeader>
        <CardTitle>Task Automation Progress</CardTitle>
        <CardDescription>Percentage of tasks automated</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col items-center justify-center space-y-4">
          <div className="relative w-40 h-40">
            <svg className="w-full h-full" viewBox="0 0 100 100">
              <circle
                className="text-muted-foreground stroke-current"
                strokeWidth="10"
                cx="50"
                cy="50"
                r="40"
                fill="transparent"
              />
              <circle
                className="text-primary stroke-current"
                strokeWidth="10"
                strokeLinecap="round"
                cx="50"
                cy="50"
                r="40"
                fill="transparent"
                strokeDasharray={`${rate * 2.51327}, 251.327`}
                transform="rotate(-90 50 50)"
              />
            </svg>
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <span className="text-3xl font-bold">
                {Math.round(rate)}%
              </span>
              <span className="text-sm text-muted-foreground">
                {tasks.filter((task) => task.automated).length} /{' '}
                {tasks.length} tasks
              </span>
            </div>
          </div>
          <Progress value={rate} className="w-full" />
        </div>
      </CardContent>
    </Card>
  )
} 

File: ./packages/desktop/src/components/active-agents.tsx
import React from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Twitter, MessageSquare, ArrowRight } from 'lucide-react'

export function ActiveAgents() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Active AI Agents</CardTitle>
        <CardDescription>Currently running automations</CardDescription>
      </CardHeader>
      <CardContent>
        <ul className="space-y-2">
          <li className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Twitter className="w-4 h-4 text-blue-400" />
              <span>Tweet Drafter</span>
            </div>
            <Badge>Active</Badge>
          </li>
          <li className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <MessageSquare className="w-4 h-4 text-green-400" />
              <span>Meeting Summarizer</span>
            </div>
            <Badge>Active</Badge>
          </li>
        </ul>
        <Button variant="link" className="mt-4 w-full">
          Manage AI Agents <ArrowRight className="w-4 h-4 ml-2" />
        </Button>
      </CardContent>
    </Card>
  )
} 

File: ./packages/desktop/src/components/calendar.tsx
import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { ChevronLeft, ChevronRight } from 'lucide-react'

const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']

export function Calendar({ tasks }) {
  const [currentDate, setCurrentDate] = useState(new Date())

  const getDaysInMonth = (date) => {
    const year = date.getFullYear()
    const month = date.getMonth()
    return new Date(year, month + 1, 0).getDate()
  }

  const getFirstDayOfMonth = (date) => {
    return new Date(date.getFullYear(), date.getMonth(), 1).getDay()
  }

  const daysInMonth = getDaysInMonth(currentDate)
  const firstDayOfMonth = getFirstDayOfMonth(currentDate)

  const prevMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))
  }

  const nextMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))
  }

  return (
    <Card className="w-full max-w-3xl mx-auto bg-muted/50">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle>Calendar</CardTitle>
        <div className="flex items-center space-x-2">
          <span className="text-sm font-medium">
            {currentDate.toLocaleString('default', { month: 'long', year: 'numeric' })}
          </span>
          <Button variant="outline" size="icon" onClick={prevMonth}>
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <Button variant="outline" size="icon" onClick={nextMonth}>
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-7 gap-2 text-center">
          {daysOfWeek.map((day) => (
            <div key={day} className="text-sm font-medium text-muted-foreground">
              {day}
            </div>
          ))}
          {Array.from({ length: firstDayOfMonth }).map((_, index) => (
            <div key={`empty-${index}`} />
          ))}
          {Array.from({ length: daysInMonth }).map((_, index) => {
            const day = index + 1
            const dateString = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`
            const tasksForDay = tasks.filter(task => task.date === dateString)
            return (
              <div
                key={day}
                className={`aspect-square flex flex-col items-center justify-center p-2 text-sm ${
                  tasksForDay.length > 0 ? 'bg-primary/20 rounded-md' : ''
                }`}
              >
                <span className={tasksForDay.length > 0 ? 'font-bold' : ''}>{day}</span>
                {tasksForDay.length > 0 && (
                  <span className="text-xs text-primary">{tasksForDay.length} task{tasksForDay.length > 1 ? 's' : ''}</span>
                )}
              </div>
            )
          })}
        </div>
      </CardContent>
    </Card>
  )
}



File: ./packages/desktop/src/components/notifications.tsx
import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Bell, X } from 'lucide-react'
import { Button } from '@/components/ui/button'

const initialNotifications = [
  { id: 1, message: 'New comment on your recent post', time: '5 minutes ago' },
  { id: 2, message: 'Your project "Alpha" has been approved', time: '1 hour ago' },
  { id: 3, message: 'Meeting reminder: Team sync at 3 PM', time: '2 hours ago' },
]

export function Notifications() {
  const [notifications, setNotifications] = useState(initialNotifications)

  const dismissNotification = (id) => {
    setNotifications(notifications.filter(notification => notification.id !== id))
  }

  return (
    <Card className="bg-muted/50">
      <CardHeader>
        <CardTitle>Notifications</CardTitle>
      </CardHeader>
      <CardContent>
        {notifications.length === 0 ? (
          <p className="text-center text-muted-foreground">No new notifications</p>
        ) : (
          <ul className="space-y-4">
            {notifications.map((notification) => (
              <li key={notification.id} className="flex items-start space-x-4">
                <Bell className="h-5 w-5 text-primary mt-0.5" />
                <div className="flex-grow">
                  <p>{notification.message}</p>
                  <p className="text-sm text-muted-foreground">{notification.time}</p>
                </div>
                <Button variant="ghost" size="icon" onClick={() => dismissNotification(notification.id)}>
                  <X className="h-4 w-4" />
                </Button>
              </li>
            ))}
          </ul>
        )}
      </CardContent>
    </Card>
  )
}



File: ./packages/desktop/src/components/task-classification.tsx
import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Zap, MessageSquare, ArrowRight } from 'lucide-react';
import { generateObject } from 'ai';
import { z } from 'zod';
import { createOpenAI } from '@ai-sdk/openai';
import { useApiKeyStore } from '@/stores/api-key-store';

export type TaskClassification = {
  category: string;
  confidence: number;
  suggestedAction: string;
  priority: 'high' | 'medium' | 'low';
  timeEstimate: string;
};

export type RecognizedTask = {
  id: string;
  content: string;
  timestamp: string;
  source: string;
  confidence: number;
};

type TaskClassificationProps = {
  onNewTasksRecognized?: (tasks: RecognizedTask[]) => void;
  onNewClassification?: (classification: TaskClassification) => void;
};

export function TaskClassification({
  onNewTasksRecognized,
  onNewClassification,
}: TaskClassificationProps) {
  const [autoClassify, setAutoClassify] = useState(true);
  const [isClassifying, setIsClassifying] = useState(false);
  const [lastClassifiedAt, setLastClassifiedAt] = useState<Date | null>(null);
  const [classificationError, setClassificationError] = useState<string | null>(
    null
  );
  const [recognizedTasks, setRecognizedTasks] = useState<RecognizedTask[]>([]);
  const { apiKey } = useApiKeyStore();

  const classifyInterval = async (startTime: string, endTime: string) => {
    setIsClassifying(true);
    setClassificationError(null);

    try {
      // Check if Screenpipe is running
      const healthCheck = await fetch('http://localhost:3030/health');
      if (!healthCheck.ok) {
        throw new Error(
          'Screenpipe is not running. Please start Screenpipe first.'
        );
      }

      // 1. Get data from screenpipe
      const searchParams = new URLSearchParams({
        start_time: startTime,
        end_time: endTime,
        limit: '10',
        content_type: 'ocr',
        // include_frames: 'true',
      });

      const response = await fetch(
        `http://localhost:3030/search?${searchParams}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      if (!response.ok) throw new Error('Failed to fetch data from Screenpipe');
      const data = await response.json();

      if (!data.data || data.data.length === 0) {
        throw new Error('No screen content found in this time interval');
      }
      const openai = createOpenAI({
        apiKey: apiKey,
      });

      // 2. Use generateObject to classify the content
      const { object } = await generateObject({
        model: openai('gpt-4o-mini'),
        schema: z.object({
          classification: z.object({
            category: z.enum([
              'Meeting',
              'Communication',
              'Content Creation',
              'Development',
              'Research',
            ]),
            confidence: z.number().min(0).max(1),
            suggestedAction: z.string(),
            priority: z.enum(['high', 'medium', 'low']),
            timeEstimate: z.string(),
            recognizedTasks: z.array(
              z.object({
                content: z.string(),
                confidence: z.number().min(0).max(1),
                source: z.string(),
              })
            ),
          }),
        }),
        prompt: `Analyze the following content and classify it into a task category with suggested actions:
                ${data.data.map((item) => item.content.text).join('\n')}`,
      });

      // 3. Update both classifications and recognized tasks
      const classification = {
        category: object.classification.category,
        confidence: object.classification.confidence,
        suggestedAction: object.classification.suggestedAction,
        priority: object.classification.priority,
        timeEstimate: object.classification.timeEstimate,
      };

      onNewClassification?.(classification);

      // Add new recognized tasks
      const newTasks = object.classification.recognizedTasks.map(
        (task, index) => ({
          id: `${Date.now()}-${index}`,
          content: task.content,
          timestamp: new Date().toISOString(),
          source: task.source,
          confidence: task.confidence,
        })
      );

      setRecognizedTasks((prev) => [...newTasks, ...prev]);
      onNewTasksRecognized?.(newTasks);
      setLastClassifiedAt(new Date());
    } catch (error) {
      console.error('Error classifying interval:', error);
      setClassificationError(
        error instanceof Error ? error.message : 'An unknown error occurred'
      );
    } finally {
      setIsClassifying(false);
    }
  };

  useEffect(() => {
    if (!autoClassify) return;

    // Initial classification
    const now = new Date();
    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60000);
    classifyInterval(fiveMinutesAgo.toISOString(), now.toISOString());

    // Set up periodic classification
    const intervalId = setInterval(() => {
      const now = new Date();
      const fiveMinutesAgo = new Date(now.getTime() - 5 * 60000);
      classifyInterval(fiveMinutesAgo.toISOString(), now.toISOString());
    }, 5 * 60000); // Every 5 minutes

    return () => clearInterval(intervalId);
  }, [autoClassify]);

  const handleManualClassification = () => {
    const now = new Date();
    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60000);
    classifyInterval(fiveMinutesAgo.toISOString(), now.toISOString());
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Classification Controls</CardTitle>
          <CardDescription>
            Manage how tasks are classified from your screen content
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <Switch
                    id="auto-classify"
                    checked={autoClassify}
                    onCheckedChange={setAutoClassify}
                  />
                  <Label htmlFor="auto-classify">
                    Auto-classify every 5 minutes
                  </Label>
                </div>
                <Button
                  variant="outline"
                  onClick={handleManualClassification}
                  className="ml-4"
                  disabled={isClassifying}
                >
                  {isClassifying ? (
                    <>
                      <span className="animate-spin mr-2">âš¡</span>
                      Classifying...
                    </>
                  ) : (
                    <>
                      <Zap className="mr-2 h-4 w-4" />
                      Classify Now
                    </>
                  )}
                </Button>
              </div>
              <div className="text-sm text-muted-foreground">
                {lastClassifiedAt ? (
                  <>Last classified: {lastClassifiedAt.toLocaleTimeString()}</>
                ) : (
                  'Not classified yet'
                )}
              </div>
            </div>

            {classificationError && (
              <div className="p-3 rounded-lg bg-destructive/10 text-destructive text-sm">
                {classificationError}
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Latest Recognized Items</CardTitle>
          <CardDescription>
            Recently detected tasks and actions from your workflow
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {recognizedTasks.map((task) => (
              <div
                key={task.id}
                className="flex items-start space-x-4 p-3 rounded-lg border bg-card"
              >
                <div className="flex-1 space-y-1">
                  <div className="flex items-center justify-between">
                    <p className="font-medium">{task.content}</p>
                    <Badge
                      variant={task.confidence > 0.9 ? 'default' : 'secondary'}
                    >
                      {(task.confidence * 100).toFixed(0)}%
                    </Badge>
                  </div>
                  <div className="flex items-center text-sm text-muted-foreground">
                    <span className="flex items-center">
                      <MessageSquare className="mr-1 h-4 w-4" />
                      {task.source}
                    </span>
                    <span className="mx-2">â€¢</span>
                    <time dateTime={task.timestamp}>
                      {new Date(task.timestamp).toLocaleTimeString()}
                    </time>
                  </div>
                </div>
                <Button variant="outline" size="sm">
                  Add Task
                </Button>
              </div>
            ))}
          </div>
          <Button variant="link" className="mt-4 w-full">
            View All Recognized Items
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}


File: ./packages/desktop/src/components/ai-agent-store.tsx
import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Calculator, Calendar, FileText, Mail, PenTool, Search, Twitter } from 'lucide-react'

const initialAgents = [
  { 
    id: 1, 
    name: 'Tweet Drafter', 
    icon: Twitter, 
    installed: true,
    description: 'Automatically drafts tweets based on your content and schedule.'
  },
  { 
    id: 2, 
    name: 'Meeting Scheduler', 
    icon: Calendar, 
    installed: false,
    description: 'Coordinates and schedules meetings based on participants\' availability.'
  },
  { 
    id: 3, 
    name: 'Email Summarizer', 
    icon: Mail, 
    installed: true,
    description: 'Provides concise summaries of long emails and threads.'
  },
  { 
    id: 4, 
    name: 'Document Drafter', 
    icon: FileText, 
    installed: false,
    description: 'Creates initial drafts of documents based on your inputs and templates.'
  },
  { 
    id: 5, 
    name: 'Research Assistant', 
    icon: Search, 
    installed: false,
    description: 'Gathers and summarizes information on specified topics from reliable sources.'
  },
  { 
    id: 6, 
    name: 'Presentation Creator', 
    icon: PenTool, 
    installed: false,
    description: 'Generates presentation outlines and slides based on your content.'
  },
]

export function AIAgentStore() {
  const [agents, setAgents] = useState(initialAgents)

  const toggleInstallation = (id) => {
    setAgents(agents.map(agent =>
      agent.id === id ? { ...agent, installed: !agent.installed } : agent
    ))
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>AI Agent Store</CardTitle>
          <CardDescription>Discover and manage AI agents to automate your tasks</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {agents.map((agent) => (
              <Card key={agent.id}>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <agent.icon className="h-6 w-6" />
                    <span>{agent.name}</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground mb-4">{agent.description}</p>
                  <div className="flex items-center justify-between">
                    <Badge variant={agent.installed ? 'default' : 'secondary'}>
                      {agent.installed ? 'Installed' : 'Available'}
                    </Badge>
                    <Button variant="outline" size="sm" onClick={() => toggleInstallation(agent.id)}>
                      {agent.installed ? 'Uninstall' : 'Install'}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Active AI Agents</CardTitle>
          <CardDescription>Currently running automations</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {agents.filter(agent => agent.installed).map((agent) => (
              <div key={agent.id} className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <agent.icon className="h-6 w-6" />
                  <span>{agent.name}</span>
                </div>
                <Button variant="outline" size="sm">Configure</Button>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}



File: ./packages/desktop/src/components/automation-insights.tsx
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'

export function AutomationInsights({ tasks }) {
  const automatedTasks = tasks.filter(task => task.automated)
  const manualTasks = tasks.filter(task => !task.automated)

  const data = [
    { name: 'Automated', value: automatedTasks.length },
    { name: 'Manual', value: manualTasks.length },
  ]

  const timeData = [
    { name: 'Mon', automated: 4, manual: 2 },
    { name: 'Tue', automated: 3, manual: 3 },
    { name: 'Wed', automated: 5, manual: 1 },
    { name: 'Thu', automated: 4, manual: 2 },
    { name: 'Fri', automated: 6, manual: 1 },
  ]

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>Task Automation Overview</CardTitle>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={data}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="value" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Weekly Automation Trends</CardTitle>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={timeData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="automated" fill="#8884d8" stackId="a" name="Automated Tasks" />
              <Bar dataKey="manual" fill="#82ca9d" stackId="a" name="Manual Tasks" />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </div>
  )
}



File: ./packages/desktop/src/components/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        icon: "text-foreground hover:text-foreground [&>svg]:hover:text-primary-light [&>svg]:active:text-primary",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant: asChild ? 'icon' : variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



File: ./packages/desktop/src/components/dashboard-header.tsx
import { motion } from 'framer-motion'
import { Activity, Bell, Zap, Layers, Settings, User, BarChart } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'

const menuItems = [
  { id: 'overview', icon: Activity, label: 'Overview' },
  { id: 'tasks', icon: Zap, label: 'Tasks & Automations' },
  { id: 'integrations', icon: Layers, label: 'Integrations' },
  { id: 'notifications', icon: Bell, label: 'Notifications' },
  { id: 'aiAgents', icon: User, label: 'AI Agents' },
  { id: 'insights', icon: BarChart, label: 'Insights' },
]

export function DashboardHeader({ activePanel, setActivePanel }) {
  return (
    <header className="border-b border-border bg-background">
      <div className="container mx-auto flex h-16 items-center justify-between px-4">
        <div className="flex items-center space-x-4">
          <span className="text-2xl font-bold text-primary">
            hyprsqrl
          </span>
          <nav className="hidden md:flex space-x-1">
            {menuItems.map((item) => (
              <Button
                key={item.id}
                variant="ghost"
                className={`relative nav-item ${activePanel === item.id ? 'text-primary' : 'text-foreground'}`}
                onClick={() => setActivePanel(item.id)}
              >
                <item.icon className={`h-5 w-5 mr-2 ${activePanel === item.id ? 'text-primary' : ''}`} />
                {item.label}
                {activePanel === item.id && (
                  <motion.div
                    className="absolute bottom-0 left-0 right-0 h-0.5 bg-primary"
                    layoutId="activePanel"
                  />
                )}
              </Button>
            ))}
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <Button variant="ghost" size="icon">
            <Settings className="h-5 w-5" />
          </Button>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                <Avatar className="h-8 w-8">
                  <AvatarImage src="/avatars/01.png" alt="@username" />
                  <AvatarFallback>UN</AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuItem>
                <User className="mr-2 h-4 w-4" />
                <span>Profile</span>
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Settings className="mr-2 h-4 w-4" />
                <span>Settings</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  )
}



File: ./packages/desktop/src/components/theme-toggle.tsx
import { Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'
import { Button } from '@/components/ui/button'
import { useEffect, useState } from 'react'

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  return (
    <Button
      variant="outline"
      size="icon"
      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
    >
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}



File: ./packages/desktop/src/components/integrations.tsx
import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Github, Slack, Mail, MessageSquare, GitBranch, BellIcon as BrandTelegram, Monitor, Twitter, Plus } from 'lucide-react'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'

const initialIntegrations = [
  { id: 1, name: 'GitHub', icon: Github, status: 'Connected', type: 'Development' },
  { id: 2, name: 'Slack', icon: Slack, status: 'Connected', type: 'Communication' },
  { id: 3, name: 'Linear', icon: GitBranch, status: 'Disconnected', type: 'Project Management' },
  { id: 4, name: 'Telegram', icon: BrandTelegram, status: 'Disconnected', type: 'Communication' },
  { id: 5, name: 'Screenpipe', icon: Monitor, status: 'Connected', type: 'Screen Capture' },
  { id: 6, name: 'Email', icon: Mail, status: 'Connected', type: 'Communication' },
  { 
    id: 7, 
    name: 'Twitter', 
    icon: Twitter, 
    status: 'Connected', 
    type: 'Social Media',
    agent: {
      name: 'Create Tweet in Response to Message',
      description: 'Automatically drafts tweets based on messages, using Unconf\'s brand voice',
      configured: true
    }
  },
]

export function Integrations() {
  const [integrations, setIntegrations] = useState(initialIntegrations)
  const [twitterUsername, setTwitterUsername] = useState('@UnconfCrypto')

  const toggleConnection = (id) => {
    setIntegrations(integrations.map(integration =>
      integration.id === id
        ? { ...integration, status: integration.status === 'Connected' ? 'Disconnected' : 'Connected' }
        : integration
    ))
  }

  const configureAgent = (id) => {
    setIntegrations(integrations.map(integration =>
      integration.id === id && integration.agent
        ? { ...integration, agent: { ...integration.agent, configured: !integration.agent.configured } }
        : integration
    ))
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Connected Apps</CardTitle>
          <CardDescription>Manage your integrated services</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {integrations.map((integration) => (
              <Card key={integration.id} className={`p-4 flex flex-col items-center justify-center ${integration.status === 'Connected' ? 'bg-primary/10' : ''}`}>
                <integration.icon className="h-10 w-10 mb-2" />
                <h3 className="font-semibold text-center">{integration.name}</h3>
                <Badge variant={integration.status === 'Connected' ? 'default' : 'secondary'}>
                  {integration.status}
                </Badge>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="mt-2"
                  onClick={() => toggleConnection(integration.id)}
                >
                  {integration.status === 'Connected' ? 'Disconnect' : 'Connect'}
                </Button>
              </Card>
            ))}
            <Card className="p-4 flex flex-col items-center justify-center border-dashed">
                <Plus className="h-10 w-10 mb-2" />
                <h3 className="font-semibold text-center">Add New Integration</h3>
                <Button variant="outline" size="sm" className="mt-2">
                  Browse Integrations
                </Button>
              </Card>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Integration Settings</CardTitle>
          <CardDescription>Configure your connected apps</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {integrations.filter(i => i.status === 'Connected').map((integration) => (
              <div key={integration.id} className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <integration.icon className="h-6 w-6" />
                  <span>{integration.name}</span>
                </div>
                <Button variant="outline" size="sm">Configure</Button>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}



File: ./packages/desktop/src/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
} 

