---
description: Overview of project structure, purpose, and coding guidelines
globs: 
---

# HyprSQRL Project Overview

HyprSQRL is an all-in-one crypto financial hub for freelancers and businesses. The platform helps users collect payments, handle expenses, and maximize yield on earnings by bridging traditional finance and cryptocurrency.

## Key Features

- **Crypto Invoicing:** Create and receive payments in cryptocurrencies
- **Fiat Integration:** Connect with traditional banking via Monerium and other providers
- **AI-Powered Features:** Screen monitoring and automatic information extraction
- **Multi-Chain Support:** Integration with Ethereum, Gnosis, and other networks
- **Financial Dashboard:** Comprehensive overview of finances and transactions

## Project Structure

- **packages/desktop** - Main desktop application
  - **frontend** - User interface (Vite)
  - **electron** - Desktop app backend
  - **preload** - Electron preload script

- **packages/landing-v0** - Marketing website and user onboarding (Next.js)

- **packages/web** - Invoice management web application (Next.js)
  - **src/app** - Next.js application routes
  - **src/components** - Reusable UI components
  - **src/lib** - Core libraries and utilities
  - **src/db** - Database schema and connection

- **pipes/auto-pay** - Automated payment detection and processing
  - **src/agents** - AI agents for payment workflow
  - **src/components** - UI components specific to auto-pay
  - **src/lib** - Auto-pay specific utilities

## Core Functionality

- Request Creation Flow:
  1. Event detection via screen monitoring (Screenpipe API)
  2. AI classification of detected content
  3. Extraction of invoice data using LLMs
  4. Invoice creation through Request Network
  5. Payment processing via cryptocurrency or fiat channels

## Integration Points

- **Screenpipe:** Screen monitoring and OCR capability
- **Request Network:** Decentralized invoicing infrastructure
- **Monerium:** E-money and banking integration
- **Mercury:** Banking API integration
- **Gnosis Chain:** Blockchain network for transactions

## Coding Guidelines

- **File naming:** kebab-case
- **Variables/functions:** camelCase
- **Components:** PascalCase
- **Logging:** `console.log("0xHypr", 'variableName', variable)`
- **State Management:** Zustand for global state
- **UI Components:** shadcn/ui and Tailwind CSS
- **Forms:** React Hook Form with zod validation
- **Package Manager:** pnpm in a monorepo structure
- **Return early pattern** for error handling and code readability
- **Absolute imports** with aliases (`@/lib/utils` not `../../../lib/utils`)

## API Integration

Always provide appropriate error handling and loading states when integrating with external APIs:
- Screenpipe API for screen monitoring
- Request Network for invoicing
- Mercury API for banking operations
- Other payment processors and financial services

## AI Integration

- Uses Vercel AI SDK for AI-powered features
- LLM integration for data extraction and automation
- Uses function calling pattern for structured outputs

## User Context

When implementing new features, always consider:
1. Is this feature enhancing the financial workflow for freelancers?
2. Does it reduce manual effort in financial operations?
3. Is it maintaining privacy and security of financial data?
4. Does it bridge the gap between traditional finance and crypto?