---
description: Always check this file it contains goal of product, and next milestones.
globs: 
alwaysApply: false
---
perfect, here‚Äôs a concise but detailed week 1 summary you can reuse directly:

use pnpm

--  

The new app is under packages/request-invoice-web

A lot of the information is coded:
-  [screenpipe-search.ts](mdc:packages/desktop/frontend/agents/tools/screenpipe-search.ts)    
-  [request-service.ts](mdc:packages/desktop/electron/services/request-service.ts) 
-  [async-invoice-agent.ts](mdc:packages/desktop/frontend/agents/async-invoice-agent.ts) 

For any AI feature use [vercel-ai-sdk.mdc](mdc:.cursor/rules/vercel-ai-sdk.mdc)

üü¢ week 1 launch plan: ‚Äúai-assisted invoice filling‚Äù

üéØ goal

launch an mvp enabling users to quickly fill out invoices with ai-assistance (via chat), integrated with request finance api. users provide minimal input; the ai searches local context (screenpipe) to populate invoices accurately.

üß© required features and capabilities

core invoicing capabilities
	‚Ä¢	manual invoice creation:
	‚Ä¢	users initiate invoice creation via chat-like interface by providing minimal context (e.g., ‚Äúinvoice for $2500 design mockups‚Äù).
	‚Ä¢	ai agent triggers to fill in remaining invoice details.
	‚Ä¢	ai-powered invoice filling (via screenpipe):
	‚Ä¢	uses screenpipe to retrieve local context from user‚Äôs recent screen captures (ocr).
	‚Ä¢	leverages tool-calling (agentic functions) to search recent context for additional details (buyer info, item descriptions, prices, dates, payment terms).

chat interface for invoice filling
	‚Ä¢	simple, chat-based ui (already built or planned):
	‚Ä¢	user enters invoice prompts (e.g., brief descriptions, keywords).
	‚Ä¢	ai-agent interacts, uses multiple tool calls to populate invoice fields accurately.
	‚Ä¢	final filled invoice object (validated) presented clearly.

request finance integration
	‚Ä¢	invoices created in proper request network format (rnf).
	‚Ä¢	encrypted request capability fully integrated and tested.

‚öôÔ∏è user flows (detailed)

flow 1: creating invoice via ai-chat
	1.	user opens chat interface.
	2.	user types minimal invoice request:

‚Äúcreate invoice for $2,500 design mockups‚Äù


	3.	ai agent triggered:
	‚Ä¢	initiates multiple tool-calls (screenpipeSearch) to gather data:
	‚Ä¢	searches recent screen data (ocr) for buyer details, emails, business name, invoice item specifics, etc.
	‚Ä¢	progressively refines queries based on found context until confident.
	‚Ä¢	finally, calls invoiceAnswer to produce fully validated invoice.
	4.	user reviews generated invoice:
	‚Ä¢	buyer details (business name, email)
	‚Ä¢	invoice item descriptions, quantities, prices
	‚Ä¢	total amount calculated correctly
	5.	user confirms invoice:
	‚Ä¢	invoice sent/stored via request finance api (encrypted requests).

flow 2: handling missing or incomplete data
	1.	if ai finds partial or insufficient data:
	‚Ä¢	ai clearly indicates what‚Äôs missing.
	‚Ä¢	prompts user to manually provide details or refine query.
	2.	user inputs additional context or manually edits fields in chat.
	3.	ai reruns screenpipe search (optional) or directly calls invoiceAnswer.
	4.	invoice creation completes as normal.

üìå technical details & integrations
	‚Ä¢	ai-agent integration (already implemented):
	‚Ä¢	uses tool-calling (screenpipeSearch, invoiceAnswer) through openai api.
	‚Ä¢	robust error handling and clear status updates via ui notifications (sonner toast).
	‚Ä¢	screenpipe integration:
	‚Ä¢	implemented but needs recoding/adaptation to new app structure.
	‚Ä¢	searches local ocr screen logs within user-defined recent timeframes.
	‚Ä¢	request finance api integration:
	‚Ä¢	fully implemented.
	‚Ä¢	ensure integration works smoothly in vercel-deployed environment.
	‚Ä¢	focus checks on:
	‚Ä¢	proper request formatting (rnf-compliant)
	‚Ä¢	encrypted request handling and error responses
	‚Ä¢	deployment & environment:
	‚Ä¢	currently deployed on vercel.
	‚Ä¢	minimal reconciliation logic in week 1 (planned for later phase).

üöß immediate next steps to ship
	‚Ä¢	recode/adapt existing screenpipe integration into new app quickly.
	‚Ä¢	thorough testing for:
	‚Ä¢	screenpipe querying reliability.
	‚Ä¢	accuracy of ai-generated invoice data.
	‚Ä¢	request finance encrypted api calls robustness.

this summary covers all essential capabilities, user flows, and integration points for the week 1 deliverable.

anything unclear, or ready to go ahead?