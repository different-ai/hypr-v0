---
description: 
globs: 
alwaysApply: true
---


# Accessing Route Parameters and Search Parameters in Next.js Async Server Components

When working with dynamic route segments and search parameters in Next.js async Server Components (like `page.tsx` or `layout.tsx`), both the `params` and `searchParams` objects provided as props are **Promises**. You need to `await` these promises to access the actual values.

## Correct Usage:

```typescript
// Example: app/blog/[slug]/page.tsx

// Define types for the Promise objects
type Params = Promise<{ slug: string }>;
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>;

export default async function Page(props: {
  params: Params;
  searchParams: SearchParams;
}) {
  // Await both params and searchParams
  const params = await props.params;
  const searchParams = await props.searchParams;
  
  // Now you can use the parameters
  const slug = params.slug;
  const query = searchParams.query;
  
  return <div>My Post: {slug} (Query: {query})</div>;
}
```

## Incorrect Usage (Old Pattern):

```typescript
// Incorrect: Accessing params and searchParams directly without awaiting
export default async function Page({
  params,
  searchParams,
}: {
  params: { slug: string };
  searchParams: { [key: string]: string | string[] | undefined };
}) {
  // This will likely result in an error or unexpected behavior
  const slug = params.slug;
  const query = searchParams.query;
  
  return <div>My Post: {slug} (Query: {query})</div>;
}
```

## Key Takeaways:

1. Define types for both `Params` and `SearchParams` as Promises
2. Accept the props as a single object rather than destructuring at the parameter level
3. Await both `props.params` and `props.searchParams` at the beginning of your component
4. Then access the properties on the awaited objects